# -*- coding: utf-8 -*-
"""–ö–æ–ø–∏—è –±–ª–æ–∫–Ω–æ—Ç–∞ "fux.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HQj0cn0Kd9GDCB32H8-WIUvDIjRmEF_d
"""

#@title { display-mode: "form" }

# -*- coding: utf-8 -*-
"""UX –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä V24.0 - –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –±—Ä–∏—Ñ"""

# ========================================================================
# üöÄ UX –ê–ù–ê–õ–ò–ó–ê–¢–û–† V24.0 - GEMINI EDITION
# ========================================================================
# –ò–∑–º–µ–Ω–µ–Ω–∏—è v24.0:
# - –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
# - –£—Å–∏–ª–µ–Ω —Ñ–æ–∫—É—Å –Ω–∞ –±—Ä–∏—Ñ –∏ –µ–≥–æ –≤–æ–ø—Ä–æ—Å—ã
# - –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞
# - –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç –≤–æ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
# - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
# - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç–∞–ª–∏ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏
# ========================================================================

import subprocess
import sys

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
try:
    import requests
    import yaml
    import pandas
    import docx
    import matplotlib
    import seaborn
    import wordcloud
    import plotly
    import nltk
    import tqdm
    from weasyprint import HTML as WeasyHTML
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
except ImportError:
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è WeasyPrint
    subprocess.run(['apt-get', 'update', '-qq'], capture_output=True)
    subprocess.run(['apt-get', 'install', '-y', '-qq', 'libpango-1.0-0', 'libpangoft2-1.0-0',
                    'libgdk-pixbuf2.0-0', 'libffi-dev', 'fonts-liberation'], capture_output=True)

    # Python –ø–∞–∫–µ—Ç—ã (—É–±—Ä–∞–ª–∏ google-generativeai)
    packages = ['requests', 'pyyaml', 'weasyprint', 'pandas', 'python-docx',
                'openpyxl', 'xlrd', 'matplotlib', 'seaborn', 'wordcloud', 'plotly', 'kaleido',
                'tqdm', 'nltk']
    for package in packages:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package, "-q"])
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

# –ò–º–ø–æ—Ä—Ç—ã
import os
import json
import re
import time
import logging
import yaml
from datetime import datetime
from typing import Dict, List, Optional, Union, Tuple, Any
from dataclasses import dataclass, field
from pathlib import Path
import traceback
import base64
from collections import defaultdict
import concurrent.futures
from io import BytesIO
import numpy as np
import random
import hashlib
import pickle
from tqdm.notebook import tqdm

import requests
import pandas as pd
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.style import WD_STYLE_TYPE
from weasyprint import HTML as WeasyHTML
from google.colab import files
from IPython.display import display, HTML, clear_output, FileLink
import ipywidgets as widgets

import nltk
nltk.download('vader_lexicon', quiet=True)
from nltk.sentiment import SentimentIntensityAnalyzer

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import plotly.graph_objects as go
import plotly.express as px
import plotly.io as pio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
plt.style.use('seaborn-v0_8-whitegrid')
plt.rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['figure.facecolor'] = 'white'
pio.templates.default = "plotly_white"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ========================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ========================================================================
config_str = """
api:
  openrouter:
    models:
      - "anthropic/claude-3.5-sonnet"
      - "anthropic/claude-3-opus"
      - "openai/gpt-4-turbo-preview"
      - "google/gemini-pro-1.5"
    default_model: "anthropic/claude-3.5-sonnet"
    temperature: 0.0
    max_output_tokens: 8192
analysis:
  window_size: 10000
  overlap: 2000
  max_retries: 5
  retry_delay: 5
  min_interviews_recommended: 8
  use_speaker_splitting: true
  require_exact_quotes: true
  min_quote_length: 50
output:
  formats: ['html', 'pdf', 'docx']
"""
config = yaml.safe_load(config_str)

# ========================================================================
# –ö–õ–ê–°–° –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–†–ò–§–û–ú
# ========================================================================
class BriefManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–∏—Ñ–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.brief_data = {
            'research_goals': [],
            'research_questions': [],
            'target_audience': '',
            'business_context': '',
            'success_metrics': [],
            'constraints': []
        }
        self.has_brief = False

    def load_brief(self, content: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –±—Ä–∏—Ñ–∞"""
        self.has_brief = True

        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±—Ä–∏—Ñ–∞
        lines = content.strip().split('\n')
        current_section = None

        section_markers = {
            '—Ü–µ–ª–∏': 'research_goals',
            'goals': 'research_goals',
            '–≤–æ–ø—Ä–æ—Å—ã': 'research_questions',
            'questions': 'research_questions',
            '–∞—É–¥–∏—Ç–æ—Ä–∏—è': 'target_audience',
            'audience': 'target_audience',
            '–∫–æ–Ω—Ç–µ–∫—Å—Ç': 'business_context',
            'context': 'business_context',
            '–º–µ—Ç—Ä–∏–∫–∏': 'success_metrics',
            'metrics': 'success_metrics',
            '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è': 'constraints',
            'constraints': 'constraints'
        }

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª–æ –ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏
            line_lower = line.lower()
            for marker, section in section_markers.items():
                if marker in line_lower:
                    current_section = section
                    break
            else:
                # –≠—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
                if current_section:
                    if current_section == 'target_audience' or current_section == 'business_context':
                        # –î–ª—è —ç—Ç–∏—Ö —Å–µ–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        if self.brief_data[current_section]:
                            self.brief_data[current_section] += ' ' + line
                        else:
                            self.brief_data[current_section] = line
                    else:
                        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                        if line.startswith('-') or line.startswith('‚Ä¢') or line.startswith('*'):
                            line = line[1:].strip()
                        if line:
                            self.brief_data[current_section].append(line)

    def get_brief_context(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤"""
        if not self.has_brief:
            return ""

        context = "<research_context>\n"
        context += "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í—Å–µ –≤—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –∏–∑ —ç—Ç–æ–≥–æ –±—Ä–∏—Ñ–∞!\n\n"

        if self.brief_data['research_goals']:
            context += f"–¶–ï–õ–ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ—Å—Ç–∏—á—å –∫–∞–∂–¥—É—é):\n"
            for i, goal in enumerate(self.brief_data['research_goals'], 1):
                context += f"{i}. {goal}\n"

        if self.brief_data['research_questions']:
            context += f"\n–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –í–û–ü–†–û–°–´ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π):\n"
            for i, question in enumerate(self.brief_data['research_questions'], 1):
                context += f"{i}. {question}\n"

        if self.brief_data['target_audience']:
            context += f"\n–¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:\n{self.brief_data['target_audience']}\n"

        if self.brief_data['business_context']:
            context += f"\n–ë–ò–ó–ù–ï–°-–ö–û–ù–¢–ï–ö–°–¢:\n{self.brief_data['business_context']}\n"

        if self.brief_data['success_metrics']:
            context += f"\n–ú–ï–¢–†–ò–ö–ò –£–°–ü–ï–•–ê (–æ—Ü–µ–Ω–∏—Ç—å –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—É—é):\n"
            for metric in self.brief_data['success_metrics']:
                context += f"- {metric}\n"

        context += "\n–í–ê–ñ–ù–û: –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω –¢–û–ß–ù–´–ú–ò –¶–ò–¢–ê–¢–ê–ú–ò –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é!\n"
        context += "</research_context>\n\n"

        return context

    def get_questions_for_analysis(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return self.brief_data['research_questions']

    def get_goals_for_analysis(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        return self.brief_data['research_goals']

# ========================================================================
# –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ü–ï–†–ï–ì–†–£–ó–û–ö API
# ========================================================================
def retry_on_overload(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫ API"""
    def wrapper(*args, **kwargs):
        max_retries = config['analysis']['max_retries']
        base_delay = config['analysis']['retry_delay']

        for attempt in range(max_retries):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                error_str = str(e)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É –∏–ª–∏ rate limit
                if any(err in error_str.lower() for err in ["quota", "rate", "limit", "overload", "429", "503"]):
                    if attempt < max_retries - 1:
                        delay = base_delay * (2 ** attempt) + random.uniform(0, 5)
                        print(f"   ‚è≥ API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫... (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                        time.sleep(delay)
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                        raise
                else:
                    raise

        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

    return wrapper

# ========================================================================
# OPENROUTER API WRAPPER (–ó–ê–ú–ï–ù–ê GEMINI)
# ========================================================================
class GeminiAPIWrapper:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ OpenRouter API"""

    def __init__(self, api_key: str, model: str = None):
        self.api_key = api_key
        self.model = model or config['api']['openrouter']['default_model']
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"

    def set_model(self, model: str):
        """–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"""
        self.model = model

    @retry_on_overload
    def generate_content(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/ux-analyzer",
            "X-Title": "UX Analyzer"
        }

        data = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": config['api']['openrouter']['temperature'],
            "max_tokens": config['api']['openrouter']['max_output_tokens']
        }

        response = requests.post(
            self.base_url,
            headers=headers,
            json=data,
            timeout=120
        )

        if response.status_code != 200:
            raise Exception(f"OpenRouter API error: {response.status_code} - {response.text}")

        result = response.json()
        return result['choices'][0]['message']['content']

# ========================================================================
# –î–ê–¢–ê–ö–õ–ê–°–°–´
# ========================================================================
@dataclass
class CompanyConfig:
    name: str = "Company"
    report_title: str = "UX Research Report"
    author: str = "Research Team"

@dataclass
class InterviewSummary:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–º–º–∞—Ä–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""
    interview_id: int
    respondent_profile: Dict[str, Any]
    key_themes: List[Dict[str, Any]]
    pain_points: List[Dict[str, Any]]
    needs: List[Dict[str, Any]]
    insights: List[str]
    emotional_journey: List[Dict[str, Any]]
    contradictions: List[str]
    quotes: List[Dict[str, Any]]
    business_pains: List[Dict[str, Any]] = field(default_factory=list)
    user_problems: List[Dict[str, Any]] = field(default_factory=list)
    opportunities: List[str] = field(default_factory=list)
    sentiment_score: float = field(default=0.0)
    brief_related_findings: Dict[str, Any] = field(default_factory=dict)

@dataclass
class ResearchFindings:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    executive_summary: str
    key_insights: List[Dict[str, Any]]
    behavioral_patterns: List[Dict[str, Any]]
    user_segments: List[Dict[str, Any]]
    pain_points_map: Dict[str, List[Dict[str, Any]]]
    opportunities: List[Dict[str, Any]]
    recommendations: List[Dict[str, Any]]
    risks: List[Dict[str, Any]]
    personas: List[Dict[str, Any]]
    current_metrics: Dict[str, Any] = field(default_factory=dict)
    brief_answers: Dict[str, Any] = field(default_factory=dict)
    goal_achievement: Dict[str, Any] = field(default_factory=dict)

# ========================================================================
# –ö–õ–ê–°–° –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
# ========================================================================
class CacheManager:
    def __init__(self, cache_dir="cache"):
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(exist_ok=True)

    def get_hash(self, data: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        return hashlib.md5(data.encode()).hexdigest()

    def get(self, key: str):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞"""
        cache_file = self.cache_dir / f"{key}.pkl"
        if cache_file.exists():
            with open(cache_file, 'rb') as f:
                return pickle.load(f)
        return None

    def set(self, key: str, value: Any):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫—ç—à"""
        cache_file = self.cache_dir / f"{key}.pkl"
        with open(cache_file, 'wb') as f:
            pickle.dump(value, f)

# ========================================================================
# –£–õ–£–ß–®–ï–ù–ù–´–ô –ö–õ–ê–°–° –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –° GEMINI
# ========================================================================
class AdvancedGeminiAnalyzer:
    def __init__(self, api_key: str, model: str = None):
        self.api_wrapper = GeminiAPIWrapper(api_key, model)
        self.window_size = config['analysis']['window_size']
        self.overlap = config['analysis']['overlap']
        self.interview_summaries = []
        self.cache = CacheManager()
        self.brief_manager = BriefManager()

    def set_brief(self, brief_content: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—Ä–∏—Ñ–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        self.brief_manager.load_brief(brief_content)

    def analyze_transcripts_parallel(self, transcripts: List[str]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        print("üß† –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
        if len(transcripts) < config['analysis']['min_interviews_recommended']:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {config['analysis']['min_interviews_recommended']} –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!")
            print(f"   –£ –≤–∞—Å: {len(transcripts)} –∏–Ω—Ç–µ—Ä–≤—å—é")
            print("   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–º–∏\n")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        max_workers = min(3, len(transcripts))

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_idx = {
                executor.submit(self._deep_analyze_interview, transcript, i+1): i
                for i, transcript in enumerate(transcripts)
            }

            interview_summaries = [None] * len(transcripts)

            for future in tqdm(concurrent.futures.as_completed(future_to_idx),
                              total=len(transcripts), desc="–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"):
                idx = future_to_idx[future]
                try:
                    interview_summaries[idx] = future.result()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–Ω—Ç–µ—Ä–≤—å—é {idx+1}: {e}")
                    interview_summaries[idx] = self._create_empty_summary(idx+1)

        interview_summaries = [s for s in interview_summaries if s is not None]
        self.interview_summaries = interview_summaries

        return self._continue_analysis(interview_summaries, len(transcripts))

    def analyze_transcripts(self, transcripts: List[str]) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏"""
        print("üß† –ù–∞—á–∏–Ω–∞—é –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑...")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
        if len(transcripts) < config['analysis']['min_interviews_recommended']:
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {config['analysis']['min_interviews_recommended']} –∏–Ω—Ç–µ—Ä–≤—å—é!")
            print(f"   –£ –≤–∞—Å: {len(transcripts)} –∏–Ω—Ç–µ—Ä–≤—å—é")

        with tqdm(total=12, desc="–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å") as pbar:
            pbar.set_description("–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é")
            interview_summaries = []

            for i, transcript in enumerate(tqdm(transcripts, desc="–ò–Ω—Ç–µ—Ä–≤—å—é", leave=False)):
                summary = self._deep_analyze_interview(transcript, i+1)
                interview_summaries.append(summary)

            self.interview_summaries = interview_summaries
            pbar.update(1)

        return self._continue_analysis(interview_summaries, len(transcripts))

    def _continue_analysis(self, interview_summaries: List[InterviewSummary], total_interviews: int) -> Dict:
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        with tqdm(total=12, desc="–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", initial=1) as pbar:
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
            pbar.set_description("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫")
            current_metrics = self._generate_current_metrics(interview_summaries)
            pbar.update(1)

            # 3. –ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
            pbar.set_description("–ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑")
            cross_analysis = self._cross_analyze_interviews(interview_summaries)
            pbar.update(1)

            # 4. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–π
            pbar.set_description("–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–π")
            deduplicated_pains = self._deduplicate_pains(interview_summaries)
            pbar.update(1)

            # 5. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            pbar.set_description("–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            patterns = self._identify_behavioral_patterns(interview_summaries, cross_analysis)
            pbar.update(1)

            # 6. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            pbar.set_description("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è")
            segments = self._segment_audience(interview_summaries, patterns)
            pbar.update(1)

            # 7. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω
            pbar.set_description("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω")
            personas = self._create_personas(segments, interview_summaries)
            pbar.update(1)

            # 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            pbar.set_description("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤")
            findings = self._generate_final_findings(
                interview_summaries, cross_analysis, patterns, segments, personas
            )
            pbar.update(1)

            findings.current_metrics = current_metrics

            # 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            pbar.set_description("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            recommendations = self._generate_recommendations(findings.key_insights)
            pbar.update(1)

            # 10. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã
            pbar.set_description("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞—â–∏—Ç—ã")
            defense_materials = self._generate_defense_materials(findings, recommendations, total_interviews)
            pbar.update(1)

            # 11. –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞
            pbar.set_description("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞")
            brief_answers = self._analyze_brief_questions(interview_summaries, findings)
            findings.brief_answers = brief_answers
            pbar.update(1)

            # 12. –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π
            pbar.set_description("–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π")
            goal_achievement = self._assess_goal_achievement(findings, interview_summaries)
            findings.goal_achievement = goal_achievement
            pbar.update(1)

        return {
            'base_analysis': {
                'segments': segments,
                'problems': findings.key_insights,
                'insights': self._format_insights_for_report(findings.key_insights),
                'user_journey_issues': []
            },
            'recommendations': recommendations,
            'defense_materials': defense_materials,
            'interview_summaries': interview_summaries,
            'findings': findings,
            'total_interviews': total_interviews,
            'current_metrics': current_metrics,
            'personas': personas,
            'brief_data': self.brief_manager.brief_data if self.brief_manager.has_brief else None,
            'brief_answers': brief_answers,
            'goal_achievement': goal_achievement
        }

    def _detect_speaker_format(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        patterns = [
            r'^(Speaker\s*\d+|–°–ø–∏–∫–µ—Ä\s*\d+|Interviewer|–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä|Respondent|–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç)[:Ôºö]\s*',
            r'^([–ê-–ØA-Z][–∞-—èa-z]+\s*[–ê-–ØA-Z]?\.?\s*)[:Ôºö]\s*',
            r'^\[([^\]]+)\][:Ôºö]?\s*',
            r'^-\s*([–ê-–ØA-Z][–∞-—èa-z]+)[:Ôºö]\s*',
        ]

        lines = text.split('\n')
        speaker_lines = 0

        for line in lines[:50]:
            line = line.strip()
            if not line:
                continue

            for pattern in patterns:
                if re.match(pattern, line, re.MULTILINE | re.IGNORECASE):
                    speaker_lines += 1
                    break

        return speaker_lines > len([l for l in lines[:50] if l.strip()]) * 0.3

    def _split_by_speakers(self, text: str) -> List[Dict[str, str]]:
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º"""
        patterns = [
            r'^(Speaker\s*\d+|–°–ø–∏–∫–µ—Ä\s*\d+|Interviewer|–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä|Respondent|–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç)[:Ôºö]\s*(.+)',
            r'^([–ê-–ØA-Z][–∞-—èa-z]+\s*[–ê-–ØA-Z]?\.?\s*)[:Ôºö]\s*(.+)',
            r'^\[([^\]]+)\][:Ôºö]?\s*(.+)',
            r'^-\s*([–ê-–ØA-Z][–∞-—èa-z]+)[:Ôºö]\s*(.+)',
        ]

        segments = []
        current_speaker = "Unknown"
        current_text = []

        lines = text.split('\n')

        for line in lines:
            line = line.strip()
            if not line:
                continue

            speaker_found = False
            for pattern in patterns:
                match = re.match(pattern, line, re.MULTILINE | re.IGNORECASE)
                if match:
                    if current_text:
                        segments.append({
                            'speaker': current_speaker,
                            'text': ' '.join(current_text)
                        })

                    current_speaker = match.group(1).strip()
                    current_text = [match.group(2).strip()]
                    speaker_found = True
                    break

            if not speaker_found:
                current_text.append(line)

        if current_text:
            segments.append({
                'speaker': current_speaker,
                'text': ' '.join(current_text)
            })

        return segments

    def _create_speaker_based_chunks(self, text: str) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ø–ª–∏–∫ —Å–ø–∏–∫–µ—Ä–æ–≤"""
        segments = self._split_by_speakers(text)

        if not segments:
            return self._create_overlapping_chunks(text)

        chunks = []
        current_chunk = []
        current_size = 0

        for segment in segments:
            segment_text = f"{segment['speaker']}: {segment['text']}"
            segment_size = len(segment_text)

            if current_size + segment_size > self.window_size and current_chunk:
                chunks.append('\n'.join(current_chunk))

                overlap_segments = []
                overlap_size = 0
                for i in range(len(current_chunk) - 1, -1, -1):
                    seg_size = len(current_chunk[i])
                    if overlap_size + seg_size <= self.overlap:
                        overlap_segments.insert(0, current_chunk[i])
                        overlap_size += seg_size
                    else:
                        break

                current_chunk = overlap_segments + [segment_text]
                current_size = overlap_size + segment_size
            else:
                current_chunk.append(segment_text)
                current_size += segment_size

        if current_chunk:
            chunks.append('\n'.join(current_chunk))

        return chunks

    def _create_overlapping_chunks(self, text: str) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º"""
        chunks = []
        start = 0

        if len(text) <= self.window_size:
            return [text]

        while start < len(text):
            end = start + self.window_size
            chunk = text[start:end]
            chunks.append(chunk)
            start += self.window_size - self.overlap

        return chunks

    def _deep_analyze_interview(self, transcript: str, interview_num: int) -> InterviewSummary:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        cache_key = f"interview_{interview_num}_{self.cache.get_hash(transcript[:1000])}"
        cached = self.cache.get(cache_key)
        if cached:
            print(f"   üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_num}")
            return cached

        full_transcript = transcript

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
        if config['analysis']['use_speaker_splitting'] and self._detect_speaker_format(full_transcript):
            print(f"   üé§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é {interview_num}")
            chunks = self._create_speaker_based_chunks(full_transcript)
        else:
            chunks = self._create_overlapping_chunks(full_transcript)

        # –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
        chunk_summaries = []
        for i, chunk in enumerate(chunks):
            if len(chunks) > 1:
                print(f"   –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏ {i+1}/{len(chunks)}...")

            summary = self._summarize_chunk(chunk)
            if summary:
                chunk_summaries.append(summary)

        combined_summary = "\n\n".join(chunk_summaries)

        # –†–∞–∑–±–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ —á–∞—Å—Ç–∏
        profile_and_themes = self._analyze_profile_and_themes(combined_summary, interview_num)
        pains_and_needs = self._analyze_pains_and_needs(combined_summary, interview_num)
        emotions_and_insights = self._analyze_emotions_and_insights(combined_summary, interview_num)
        quotes_and_contradictions = self._analyze_quotes_and_contradictions(combined_summary, interview_num)
        business_aspects = self._analyze_business_aspects(combined_summary, interview_num)

        # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –±—Ä–∏—Ñ–æ–º
        brief_findings = {}
        if self.brief_manager.has_brief:
            brief_findings = self._analyze_brief_related_content(combined_summary, interview_num)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        data = {
            'interview_id': interview_num,
            'respondent_profile': profile_and_themes.get('respondent_profile', {}),
            'key_themes': profile_and_themes.get('key_themes', []),
            'pain_points': pains_and_needs.get('pain_points', []),
            'needs': pains_and_needs.get('needs', []),
            'insights': emotions_and_insights.get('insights', []),
            'emotional_journey': emotions_and_insights.get('emotional_journey', []),
            'contradictions': quotes_and_contradictions.get('contradictions', []),
            'quotes': quotes_and_contradictions.get('quotes', []),
            'business_pains': business_aspects.get('business_pains', []),
            'user_problems': business_aspects.get('user_problems', []),
            'opportunities': business_aspects.get('opportunities', []),
            'brief_related_findings': brief_findings
        }

        # Sentiment analysis
        try:
            sia = SentimentIntensityAnalyzer()
            sentiment_score = sia.polarity_scores(full_transcript)
            data['sentiment_score'] = sentiment_score['compound']
        except:
            data['sentiment_score'] = 0

        result = InterviewSummary(**data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.cache.set(cache_key, result)

        return result

    @retry_on_overload
    def _analyze_profile_and_themes(self, summary: str, interview_num: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º"""
        context = self.brief_manager.get_brief_context()

        prompt = f"""{context}

–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ{interview_num} –∏ –∏–∑–≤–ª–µ–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–µ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º–∞—Ö.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∞ –¢–û–ß–ù–´–ú–ò –¶–ò–¢–ê–¢–ê–ú–ò (–º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤)
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–∫–∞–∑—ã–≤–∞–π "–ù–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–≤—å—é"

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "respondent_profile": {{
        "demographics": "–¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ —è–≤–Ω–æ —Å–∫–∞–∑–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "occupation": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è",
        "experience_level": "–¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "context": "–¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "tech_literacy": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ",
        "motivations": "–¢–û–õ–¨–ö–û —è–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "lifestyle": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
        "archetype": "–ù–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö",
        "unique_traits": "–¢–û–õ–¨–ö–û —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"
    }},
    "key_themes": [
        {{
            "theme": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã",
            "frequency": "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–ø–æ–º–∏–Ω–∞–ª–∞—Å—å",
            "importance": "–í–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "quotes": ["–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤", "–ï—â–µ –æ–¥–Ω–∞ –ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞"],
            "emotional_tone": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Ç–µ–º—ã",
            "relevance_to_brief": "–ö–∞–∫ —Å–≤—è–∑–∞–Ω–æ —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞"
        }}
    ]
}}

–°–£–ú–ú–ê–†–ò –ò–ù–¢–ï–†–í–¨–Æ:
{summary[:4000]}"""

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _analyze_pains_and_needs(self, summary: str, interview_num: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –±–æ–ª–µ–π –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π"""
        context = self.brief_manager.get_brief_context()

        prompt = f"""{context}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤—ã—è–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ{interview_num} –∏ –Ω–∞–π–¥–∏ –í–°–ï –±–æ–ª–∏, –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–ê–ñ–î–ê–Ø –±–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∞ –¢–û–ß–ù–û–ô –¶–ò–¢–ê–¢–û–ô (–º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤)
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ø—Ä–æ–±–ª–µ–º—ã - —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ø–í–ù–û —Å–∫–∞–∑–∞–Ω–æ
3. –°–≤—è–∑—ã–≤–∞–π –∫–∞–∂–¥—É—é –Ω–∞—Ö–æ–¥–∫—É —Å —Ü–µ–ª—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±—Ä–∏—Ñ–∞
4. –ü—Ä–∏–≤–æ–¥–∏ –í–°–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{{
    "pain_points": [
        {{
            "pain": "–¢–û–ß–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "pain_type": "functional/process/emotional/social/financial",
            "root_cause": "–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "symptoms": ["–°–∏–º–ø—Ç–æ–º –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é", "–ï—â–µ —Å–∏–º–ø—Ç–æ–º"],
            "context": "–¢–û–ß–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "severity": "critical/high/medium/low",
            "frequency": "–¢–û–ß–ù–ê–Ø —á–∞—Å—Ç–æ—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "impact": "–¢–û–ß–ù–û–ï –≤–ª–∏—è–Ω–∏–µ –∏–∑ —Å–ª–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "current_solution": "–ß—Ç–æ –¢–û–ß–ù–û –¥–µ–ª–∞–µ—Ç —Å–µ–π—á–∞—Å",
            "ideal_solution": "–ß—Ç–æ –¢–û–ß–ù–û —Ö–æ—á–µ—Ç",
            "quotes": ["–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"],
            "emotional_impact": "–¢–û–ß–ù–´–ï —ç–º–æ—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "relevance_to_brief": "–ö–∞–∫ —Å–≤—è–∑–∞–Ω–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±—Ä–∏—Ñ–∞"
        }}
    ],
    "needs": [
        {{
            "need": "–¢–û–ß–ù–ê–Ø —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏",
            "need_type": "functional/emotional/social/self-actualization",
            "job_to_be_done": "–ß—Ç–æ –¢–û–ß–ù–û –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å",
            "current_satisfaction": "–ù–∞—Å–∫–æ–ª—å–∫–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞ –ø–æ —Å–ª–æ–≤–∞–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "importance": "critical/high/medium/low",
            "triggers": ["–¢–û–ß–ù–´–ô —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "barriers": ["–¢–û–ß–ù–´–ô –±–∞—Ä—å–µ—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "success_criteria": "–ß—Ç–æ –±—É–¥–µ—Ç —É—Å–ø–µ—Ö–æ–º –ø–æ —Å–ª–æ–≤–∞–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "quotes": ["–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"],
            "related_pains": ["–°–≤—è–∑–∞–Ω–Ω—ã–µ –±–æ–ª–∏"],
            "relevance_to_brief": "–ö–∞–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞"
        }}
    ]
}}

–°–£–ú–ú–ê–†–ò:
{summary[:4000]}"""

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _analyze_emotions_and_insights(self, summary: str, interview_num: int) -> Dict:
        """–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∏ –∏–Ω—Å–∞–π—Ç–æ–≤"""
        context = self.brief_manager.get_brief_context()

        prompt = f"""{context}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –¥–∏–∑–∞–π–Ω—É –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ—á–∞–π—à–∏–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ{interview_num}.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–ê–ñ–î–´–ô –∏–Ω—Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –¢–û–ß–ù–´–• –¶–ò–¢–ê–¢–ê–• (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)
2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —ç–º–æ—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ø–í–ù–û –≤—ã—Ä–∞–∂–µ–Ω–æ
3. –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞
4. –ü—Ä–∏–≤–æ–¥–∏ –í–°–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Ü–∏—Ç–∞—Ç—ã

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{{
    "emotional_journey": [
        {{
            "moment": "–¢–û–ß–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "trigger": "–ß—Ç–æ –¢–û–ß–ù–û –≤—ã–∑–≤–∞–ª–æ —ç–º–æ—Ü–∏—é",
            "emotion": "–¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "emotion_family": "primary/secondary/social/cognitive",
            "intensity": 8,
            "valence": "positive/negative/mixed",
            "duration": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
            "body_language": "–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "quote": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤",
            "coping": "–ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è–ª—Å—è –ü–û –°–õ–û–í–ê–ú —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "impact": "–í–ª–∏—è–Ω–∏–µ –ü–û –°–õ–û–í–ê–ú —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞",
            "underlying_need": "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "relevance_to_brief": "–°–≤—è–∑—å —Å —Ü–µ–ª—è–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        }}
    ],
    "emotional_patterns": [
        {{
            "pattern": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "triggers": ["–¢—Ä–∏–≥–≥–µ—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "manifestation": "–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ –¥–∞–Ω–Ω—ã–º",
            "frequency": "–ß–∞—Å—Ç–æ—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "coping_strategies": ["–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "design_implications": "–í—ã–≤–æ–¥—ã –¥–ª—è –¥–∏–∑–∞–π–Ω–∞",
            "quotes": ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"]
        }}
    ],
    "insights": [
        {{
            "insight": "–ì–ª—É–±–æ–∫–∏–π –∏–Ω—Å–∞–π—Ç –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)",
            "insight_type": "behavioral/emotional/cognitive/motivational",
            "confidence": "high/medium/low",
            "evidence": [
                "–¢–û–ß–ù–û–ï –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "–ï—â–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                "–¢—Ä–µ—Ç—å–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
            ],
            "contradiction": "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å",
            "hidden_motivation": "–°–∫—Ä—ã—Ç–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "design_opportunity": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –¥–∏–∑–∞–π–Ω–∞",
            "business_impact": "–í–ª–∏—è–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å",
            "quotes": ["–ü–û–õ–ù–ê–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤", "–ï—â–µ —Ü–∏—Ç–∞—Ç–∞"],
            "relevance_to_brief": "–ö–∞–∫ –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
        }}
    ],
    "cognitive_biases": [
        {{
            "bias": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è",
            "manifestation": "–ö–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –í –î–ê–ù–ù–û–ú –∏–Ω—Ç–µ—Ä–≤—å—é",
            "impact": "–í–ª–∏—è–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤—å—é",
            "design_consideration": "–ö–∞–∫ —É—á–µ—Å—Ç—å",
            "quotes": ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞"]
        }}
    ]
}}

–°–£–ú–ú–ê–†–ò:
{summary}"""

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _analyze_quotes_and_contradictions(self, summary: str, interview_num: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π"""
        context = self.brief_manager.get_brief_context()

        prompt = f"""{context}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏—Å–∫—É—Ä—Å-–∞–Ω–∞–ª–∏–∑—É –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞.

–ù–∞–π–¥–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏ –í–°–ï –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ{interview_num}.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ü—Ä–∏–≤–æ–¥–∏ –¢–û–õ–¨–ö–û –ü–û–õ–ù–´–ï –¢–û–ß–ù–´–ï —Ü–∏—Ç–∞—Ç—ã (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)
2. –ù–ï —Å–æ–∫—Ä–∞—â–∞–π –∏ –ù–ï –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π
3. –ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –î–û–°–õ–û–í–ù–û–ô
4. –í—ã–±–∏—Ä–∞–π —Ü–∏—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{{
    "power_quotes": [
        {{
            "quote_id": "Q1",
            "text": "–ü–û–õ–ù–ê–Ø –î–û–°–õ–û–í–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)",
            "context": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è",
            "significance": "–ü–æ—á–µ–º—É —ç—Ç–∞ —Ü–∏—Ç–∞—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "reveals": {{
                "about_user": "–ß—Ç–æ –¢–û–ß–ù–û —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                "about_product": "–ß—Ç–æ –¢–û–ß–ù–û –≥–æ–≤–æ—Ä–∏—Ç –æ –ø—Ä–æ–¥—É–∫—Ç–µ",
                "about_market": "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Ä—ã–Ω–∫–µ"
            }},
            "emotions": ["–≠–º–æ—Ü–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"],
            "keywords": ["–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ü–∏—Ç–∞—Ç—ã"],
            "metaphors": ["–ú–µ—Ç–∞—Ñ–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Ü–∏—Ç–∞—Ç–µ"],
            "quote_type": "pain/need/insight/emotion/solution",
            "usability": "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –±—Ä–∏—Ñ–∞",
            "relevance_to_questions": "–ö –∫–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –±—Ä–∏—Ñ–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è"
        }}
    ],
    "contradictions": [
        {{
            "contradiction_type": "logical/emotional/behavioral/temporal/value",
            "severity": "high/medium/low",
            "statement_1": {{
                "text": "–¢–û–ß–ù–û–ï –ø–µ—Ä–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                "emotional_state": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            }},
            "statement_2": {{
                "text": "–¢–û–ß–ù–û–ï –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç",
                "emotional_state": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            }},
            "analysis": {{
                "nature": "–í —á–µ–º –¢–û–ß–ù–û —Å—É—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è",
                "possible_reasons": ["–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"],
                "underlying_conflict": "–ì–ª—É–±–∏–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç",
                "resolution_attempts": "–ü–æ–ø—ã—Ç–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å"
            }},
            "implications": {{
                "for_design": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –¥–∏–∑–∞–π–Ω–∞",
                "for_research": "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è —Ü–µ–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
            }},
            "full_quotes": ["–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ–º 1", "–ü–æ–ª–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ 2"]
        }}
    ],
    "language_patterns": [
        {{
            "pattern": "–Ø–∑—ã–∫–æ–≤–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "frequency": "–¢–æ—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            "meaning": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
            "emotional_load": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞",
            "examples": ["–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
        }}
    ]
}}

–°–£–ú–ú–ê–†–ò:
{summary}"""

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _analyze_business_aspects(self, summary: str, interview_num: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–∞—Å–ø–µ–∫—Ç–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        context = self.brief_manager.get_brief_context()

        prompt = f"""{context}

–¢—ã ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ UX –∏ –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫–∞—Ö.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å-–≤–ª–∏—è–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ{interview_num} –∏ –Ω–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –û—Å–Ω–æ–≤—ã–≤–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
2. –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–∫—Ä–µ–ø–ª—è–π –¢–û–ß–ù–´–ú–ò –¶–ò–¢–ê–¢–ê–ú–ò
3. –°–≤—è–∑—ã–≤–∞–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —É—Å–ø–µ—Ö–∞ –∏–∑ –±—Ä–∏—Ñ–∞
4. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ - —Ç–æ–ª—å–∫–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON:
{{
    "business_pains": [
        {{
            "pain": "–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–±–ª–µ–º–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é",
            "source": "–¢–û–ß–ù–ê–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞-–∏—Å—Ç–æ—á–Ω–∏–∫",
            "impact": {{
                "revenue": "–í–ª–∏—è–Ω–∏–µ –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
                "costs": "–í–ª–∏—è–Ω–∏–µ –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
                "efficiency": "–í–ª–∏—è–Ω–∏–µ –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
                "reputation": "–í–ª–∏—è–Ω–∏–µ –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è"
            }},
            "affected_metrics": ["–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞ –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞"],
            "quantification": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ï–°–õ–ò –ï–°–¢–¨ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "urgency": "critical/high/medium/low",
            "dependencies": ["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "quotes": ["–ü–û–õ–ù–ê–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"],
            "relevance_to_success_metrics": "–°–≤—è–∑—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —É—Å–ø–µ—Ö–∞ –∏–∑ –±—Ä–∏—Ñ–∞"
        }}
    ],
    "user_problems": [
        {{
            "problem": "–¢–û–ß–ù–ê–Ø –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "jobs_to_be_done": "–ß—Ç–æ –¢–û–ß–ù–û –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å",
            "frequency": "–¢–û–ß–ù–ê–Ø —á–∞—Å—Ç–æ—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "severity": "blocker/major/minor",
            "workaround": "–¢–û–ß–ù–û–ï —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "workaround_cost": "–¶–µ–Ω–∞ —Ä–µ—à–µ–Ω–∏—è –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
            "segments_affected": ["–°–µ–≥–º–µ–Ω—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
            "competitive_advantage": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –µ—Å–ª–∏ —Ä–µ—à–∏—Ç—å",
            "solution_criteria": ["–ö—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "quotes": ["–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"],
            "impact_on_goals": "–ö–∞–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –±—Ä–∏—Ñ–∞"
        }}
    ],
    "opportunities": [
        {{
            "opportunity": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –û–°–ù–û–í–ê–ù–ù–ê–Ø –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é",
            "opportunity_type": "quick_win/strategic/innovation/optimization",
            "based_on_problems": ["–ü—Ä–æ–±–ª–µ–º–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "value_proposition": "–¶–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "target_segments": ["–°–µ–≥–º–µ–Ω—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
            "implementation": {{
                "complexity": "low/medium/high",
                "timeline": "–û—Ü–µ–Ω–∫–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–∞",
                "resources": "–†–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å",
                "risks": ["–†–∏—Å–∫ –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–ª—Å—è"]
            }},
            "expected_impact": {{
                "user_value": "–¶–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "business_value": "–¶–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
                "metrics": {{
                    "metric_name": "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
                }}
            }},
            "success_criteria": ["–ö—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "quotes": ["–ü–û–õ–ù–ê–Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"],
            "alignment_with_brief": "–ö–∞–∫ –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–µ–π –±—Ä–∏—Ñ–∞"
        }}
    ]
}}

–°–£–ú–ú–ê–†–ò:
{summary}"""

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _analyze_brief_related_content(self, summary: str, interview_num: int) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –±—Ä–∏—Ñ–æ–º"""
        context = self.brief_manager.get_brief_context()
        questions = self.brief_manager.get_questions_for_analysis()
        goals = self.brief_manager.get_goals_for_analysis()

        prompt = f"""{context}

–ù–∞–π–¥–∏ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é ‚Ññ{interview_num} –í–°–ï —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ü–µ–ª—è–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º –±—Ä–∏—Ñ–∞.

–¶–ï–õ–ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:
{json.dumps(goals, ensure_ascii=False)}

–í–û–ü–†–û–°–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:
{json.dumps(questions, ensure_ascii=False)}

–î–ª—è –ö–ê–ñ–î–û–ô —Ü–µ–ª–∏ –∏ –ö–ê–ñ–î–û–ì–û –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞–π–¥–∏:
1. –ü—Ä—è–º—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
2. –ö–æ—Å–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Å–∞–π—Ç—ã
3. –¢–û–ß–ù–´–ï –¶–ò–¢–ê–¢–´ (–º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤)

–í–µ—Ä–Ω–∏ JSON:
{{
    "goal_related_findings": [
        {{
            "goal": "–¶–µ–ª—å –∏–∑ –±—Ä–∏—Ñ–∞",
            "findings": [
                {{
                    "finding": "–ß—Ç–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é",
                    "quote": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤",
                    "relevance": "–ö–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ü–µ–ª–∏",
                    "strength": "strong/moderate/weak"
                }}
            ]
        }}
    ],
    "question_related_findings": [
        {{
            "question": "–í–æ–ø—Ä–æ—Å –∏–∑ –±—Ä–∏—Ñ–∞",
            "answers": [
                {{
                    "answer": "–û—Ç–≤–µ—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                    "quote": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤",
                    "confidence": "high/medium/low",
                    "additional_context": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
                }}
            ]
        }}
    ],
    "metric_related_findings": [
        {{
            "metric": "–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞",
            "current_state": "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω—ã–º",
            "user_perception": "–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "improvement_suggestions": ["–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "quotes": ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞"]
        }}
    ]
}}

–°–£–ú–ú–ê–†–ò:
{summary}"""

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    def _create_empty_summary(self, interview_num: int) -> InterviewSummary:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–∞–º–º–∞—Ä–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return InterviewSummary(
            interview_id=interview_num,
            respondent_profile={'demographics': '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'},
            key_themes=[],
            pain_points=[],
            needs=[],
            insights=['–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑'],
            emotional_journey=[],
            contradictions=[],
            quotes=[],
            business_pains=[],
            user_problems=[],
            opportunities=[],
            sentiment_score=0.0,
            brief_related_findings={}
        )

    @retry_on_overload
    def _summarize_chunk(self, chunk: str) -> str:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞–Ω–∫–∞"""
        context = self.brief_manager.get_brief_context()

        prompt = f"""{context}

–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–Æ —Ü–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –°–æ—Ö—Ä–∞–Ω–∏ –í–°–ï –≤–∞–∂–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –ü–û–õ–ù–û–°–¢–¨–Æ –∏ –î–û–°–õ–û–í–ù–û (–º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤)
2. –ù–ï –æ–±–æ–±—â–∞–π –∏ –ù–ï –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π - –∫–æ–ø–∏—Ä—É–π —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
3. –§–∏–∫—Å–∏—Ä—É–π –í–°–ï –¥–µ—Ç–∞–ª–∏: –∏–º–µ–Ω–∞, –±—Ä–µ–Ω–¥—ã, —Å—É–º–º—ã, –¥–∞—Ç—ã, –ø—Ä–æ—Ü–µ–Ω—Ç—ã
4. –û—Ç–º–µ—á–∞–π –í–°–ï —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
5. –°–≤—è–∑—ã–≤–∞–π –Ω–∞—Ö–æ–¥–∫–∏ —Å —Ü–µ–ª—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±—Ä–∏—Ñ–∞

–°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–ò–ó–ê:

### –†–ï–°–ü–û–ù–î–ï–ù–¢
[–í–°–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–µ –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ë–ï–ó –¥–æ–¥—É–º—ã–≤–∞–Ω–∏—è]

### –ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–ë–õ–ï–ú–´
–î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã:
- –ü—Ä–æ–±–ª–µ–º–∞: [–¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é]
- –¶–∏—Ç–∞—Ç–∞: "[–ü–û–õ–ù–ê–Ø –î–û–°–õ–û–í–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤]"
- –ö–æ–Ω—Ç–µ–∫—Å—Ç: [–¢–û–ß–ù–´–ï –¥–µ—Ç–∞–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏]
- –≠–º–æ—Ü–∏–∏: [–¢–û–õ–¨–ö–û —É–ø–æ–º—è–Ω—É—Ç—ã–µ —ç–º–æ—Ü–∏–∏]
- –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è: [–¢–û–õ–¨–ö–û —Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–º]
- –ü–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è: [–¢–û–õ–¨–ö–û —É–ø–æ–º—è–Ω—É—Ç–æ–µ]
- –°–≤—è–∑—å —Å –±—Ä–∏—Ñ–æ–º: [–ö –∫–∞–∫–æ–π —Ü–µ–ª–∏/–≤–æ–ø—Ä–æ—Å—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è]

### –ü–û–¢–†–ï–ë–ù–û–°–¢–ò –ò –ñ–ï–õ–ê–ù–ò–Ø
- –Ø–≤–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: [–¢–û–õ–¨–ö–û –ø—Ä—è–º–æ —Å–∫–∞–∑–∞–Ω–Ω–æ–µ]
- –°–∫—Ä—ã—Ç—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: [–¢–û–õ–¨–ö–û —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏]
- –ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: [–¢–û–õ–¨–ö–û —Å–ª–æ–≤–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞]
- –¶–∏—Ç–∞—Ç—ã: "[–ö–∞–∂–¥–∞—è —Ü–∏—Ç–∞—Ç–∞ –ü–û–õ–ù–û–°–¢–¨–Æ]"

### –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏: [–¢–û–ß–ù–´–ï –º–æ–º–µ–Ω—Ç—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏]
- –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: [–° –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏]
- –ú–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã: [–î–û–°–õ–û–í–ù–û –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é]

### –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´
- –ü—Ä–∏–≤—ã—á–∫–∏: [–¢–û–õ–¨–ö–û —É–ø–æ–º—è–Ω—É—Ç—ã–µ]
- –û–±—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏: [–¢–û–ß–ù–û –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ]
- –¢—Ä–∏–≥–≥–µ—Ä—ã: [–¢–û–õ–¨–ö–û –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é]
- –¶–∏—Ç–∞—Ç—ã: "[–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã]"

### –ö–û–ù–¢–ï–ö–°–¢ –ò –î–ï–¢–ê–õ–ò
- –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è: [–¢–û–õ–¨–ö–û —É–ø–æ–º–∏–Ω–∞–Ω–∏—è]
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: [–¢–û–õ–¨–ö–û –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞]
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã: [–¢–û–õ–¨–ö–û —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Å—É–º–º—ã/–ø—Ä–æ—Ü–µ–Ω—Ç—ã]
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: [–¢–û–õ–¨–ö–û —É–∫–∞–∑–∞–Ω–Ω—ã–µ]

### –û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´ –ë–†–ò–§–ê
[–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –±—Ä–∏—Ñ–∞ - —á—Ç–æ –Ω–∞—à–ª–æ—Å—å –≤ —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ]

### –ò–ù–°–ê–ô–¢–´ –ò –ü–†–û–¢–ò–í–û–†–ï–ß–ò–Ø
- –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã: [–° –ø–æ–ª–Ω—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏]
- –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è: [–¢–û–ß–ù–´–ï –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è]
- –ú–æ–º–µ–Ω—Ç—ã –æ–∑–∞—Ä–µ–Ω–∏—è: [–° –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º]

–§–†–ê–ì–ú–ï–ù–¢ –ò–ù–¢–ï–†–í–¨–Æ:
{chunk}"""

        response = self.api_wrapper.generate_content(prompt)
        return response

    @retry_on_overload
    def _deduplicate_pains(self, interview_summaries: List[InterviewSummary]) -> List[Dict]:
        """–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –±–æ–ª–µ–π —á–µ—Ä–µ–∑ LLM"""
        all_pains = []
        for summary in interview_summaries:
            for pain in summary.pain_points:
                all_pains.append({
                    'pain': pain.get('pain', ''),
                    'context': pain.get('context', ''),
                    'interview_id': summary.interview_id,
                    'quotes': pain.get('quotes', []),
                    'severity': pain.get('severity', 'medium'),
                    'impact': pain.get('impact', ''),
                    'frequency': pain.get('frequency', ''),
                    'relevance_to_brief': pain.get('relevance_to_brief', '')
                })

            for pain in summary.business_pains:
                all_pains.append({
                    'pain': pain.get('pain', ''),
                    'context': pain.get('context', ''),
                    'interview_id': summary.interview_id,
                    'quotes': pain.get('quotes', []),
                    'business_impact': pain.get('impact', {}),
                    'relevance_to_brief': pain.get('relevance_to_success_metrics', '')
                })

        if not all_pains:
            return []

        context = self.brief_manager.get_brief_context()

        prompt = f'''{context}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π {len(all_pains)} –±–æ–ª–µ–π –∏–∑ {len(interview_summaries)} –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –æ–±—ä–µ–¥–∏–Ω–∏ —Å—Ö–æ–∂–∏–µ.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –û–±—ä–µ–¥–∏–Ω—è–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –±–æ–ª–∏ –æ–ø–∏—Å—ã–≤–∞—é—Ç –æ–¥–Ω—É –∫–æ—Ä–Ω–µ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É
- –°–æ—Ö—Ä–∞–Ω—è–π –í–°–ï —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
- –°–æ—Ö—Ä–∞–Ω—è–π –í–°–ï –Ω—é–∞–Ω—Å—ã –∏ –¥–µ—Ç–∞–ª–∏
- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π –ø–æ —Å–≤—è–∑–∏ —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–æ–ª–µ–π:
[
    {{
        "pain_id": "PAIN_001",
        "pain": "–û–±–æ–±—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª–∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω. 80 —Å–ª–æ–≤)",
        "pain_variations": ["–¢–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é 1", "–¢–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é 3"],
        "root_cause": "–û–±—â–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        "contexts": ["–ö–æ–Ω—Ç–µ–∫—Å—Ç 1 –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é", "–ö–æ–Ω—Ç–µ–∫—Å—Ç 2"],
        "interview_ids": [1, 3, 5],
        "frequency_stats": {{
            "absolute": "5 –∏–∑ 8 —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
            "percentage": "62.5%"
        }},
        "quotes": [
            {{
                "text": "–ü–û–õ–ù–ê–Ø –î–û–°–õ–û–í–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ (–º–∏–Ω. 60 —Å–ª–æ–≤)",
                "interview_id": 1,
                "emotion": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
            }}
        ],
        "severity": {{
            "range": "medium to critical",
            "distribution": {{"critical": 2, "high": 2, "medium": 1}},
            "average": "high"
        }},
        "impact": {{
            "on_users": ["–¢–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "on_business": ["–ë–∏–∑–Ω–µ—Å-–≤–ª–∏—è–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
            "time_waste": "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
            "emotional": ["–≠–º–æ—Ü–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
        }},
        "current_workarounds": ["–û–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
        "priority_score": 85,
        "priority_reasoning": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π –±—Ä–∏—Ñ–∞",
        "relevance_to_brief": {{
            "goals": ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è —Ü–µ–ª—å 1"],
            "questions": ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å 1"],
            "metrics": ["–ó–∞—Ç—Ä–æ–Ω—É—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞"]
        }}
    }}
]

–ë–û–õ–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
{json.dumps(all_pains, ensure_ascii=False, indent=2)}'''

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _cross_analyze_interviews(self, summaries: List[InterviewSummary]) -> Dict[str, Any]:
        """–ö—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤—å—é"""
        analysis_data = {
            'total_interviews': len(summaries),
            'profiles': [s.respondent_profile for s in summaries],
            'all_themes': [theme for s in summaries for theme in s.key_themes],
            'all_pains': [pain for s in summaries for pain in s.pain_points],
            'all_needs': [need for s in summaries for need in s.needs],
            'all_insights': [insight for s in summaries for insight in s.insights],
            'emotional_journeys': [ej for s in summaries for ej in s.emotional_journey],
            'brief_findings': [s.brief_related_findings for s in summaries if s.brief_related_findings]
        }

        context = self.brief_manager.get_brief_context()

        prompt = f'''{context}

–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –≤—ã—è–≤–ª–µ–Ω–∏–∏ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.

–ü—Ä–æ–≤–µ–¥–∏ –ì–õ–£–ë–û–ß–ê–ô–®–ò–ô –∫—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑ {len(summaries)} –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –±—Ä–∏—Ñ–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–¥–∫—Ä–µ–ø–ª—è–π –ú–ù–û–ñ–ï–°–¢–í–û–ú —Ü–∏—Ç–∞—Ç
2. –°–≤—è–∑—ã–≤–∞–π –í–°–ï –Ω–∞—Ö–æ–¥–∫–∏ —Å —Ü–µ–ª—è–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –±—Ä–∏—Ñ–∞
3. –ù–ï –æ–±–æ–±—â–∞–π - –ø—Ä–∏–≤–æ–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4. –í—ã—è–≤–ª—è–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON:
{{
    "sample_characteristics": {{
        "total_respondents": {len(summaries)},
        "demographic_distribution": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
        "experience_distribution": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–ø—ã—Ç—É –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "representativeness": "–û—Ü–µ–Ω–∫–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–∑ –±—Ä–∏—Ñ–∞",
        "potential_biases": ["–í–æ–∑–º–æ–∂–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º"]
    }},
    "common_patterns": [
        {{
            "pattern": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω. 80 —Å–ª–æ–≤)",
            "pattern_type": "behavioral/emotional/cognitive/social",
            "frequency": "6 –∏–∑ 8 —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ (75%)",
            "confidence": "high/medium/low",
            "evidence": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 1", "–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 2"],
            "quotes": ["–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 1 –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤", "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 2"],
            "exceptions": ["–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º"],
            "underlying_need": "–ì–ª—É–±–∏–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "design_implication": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–º–ø–ª–∏–∫–∞—Ü–∏—è",
            "business_implication": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–º–ø–ª–∏–∫–∞—Ü–∏—è",
            "relevance_to_brief": {{
                "goals": ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è —Ü–µ–ª—å"],
                "questions": ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"],
                "metrics": ["–ó–∞—Ç—Ä–æ–Ω—É—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞"]
            }}
        }}
    ],
    "consensus_points": [
        {{
            "point": "–¢–æ—á–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö (50+ —Å–ª–æ–≤)",
            "agreement_level": "100% (8 –∏–∑ 8)",
            "quotes_sample": ["–¶–∏—Ç–∞—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ 1", "–¶–∏—Ç–∞—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ 3", "–¶–∏—Ç–∞—Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ 5"],
            "strength": "–°–∏–ª–∞ —É–±–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
            "implication": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞",
            "action_required": "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å"
        }}
    ],
    "divergence_points": [
        {{
            "topic": "–¢–µ–º–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "positions": [
                {{
                    "position": "–ü–æ–∑–∏—Ü–∏—è 1 –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                    "holders": [1, 3, 5],
                    "reasoning": "–õ–æ–≥–∏–∫–∞ –∏–∑ –∏—Ö —Å–ª–æ–≤",
                    "quote": "–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤"
                }}
            ],
            "underlying_difference": "–ß—Ç–æ –ª–µ–∂–∏—Ç –≤ –æ—Å–Ω–æ–≤–µ –ø–æ –¥–∞–Ω–Ω—ã–º",
            "segmentation_opportunity": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"
        }}
    ],
    "unexpected_connections": [
        {{
            "connection": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–≤—è–∑—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "evidence": ["–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é 1", "–ò–∑ –∏–Ω—Ç–µ—Ä–≤—å—é 3"],
            "insight": "–ò–Ω—Å–∞–π—Ç –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–≤—è–∑–∏",
            "hypothesis": "–ì–∏–ø–æ—Ç–µ–∑–∞ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º",
            "validation_needed": "–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
        }}
    ],
    "brief_alignment": {{
        "goals_coverage": [
            {{
                "goal": "–¶–µ–ª—å –∏–∑ –±—Ä–∏—Ñ–∞",
                "coverage": "high/medium/low",
                "evidence_count": 15,
                "key_findings": ["–ö–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ 1", "–ù–∞—Ö–æ–¥–∫–∞ 2"]
            }}
        ],
        "questions_answered": [
            {{
                "question": "–í–æ–ø—Ä–æ—Å –∏–∑ –±—Ä–∏—Ñ–∞",
                "answer_quality": "comprehensive/partial/insufficient",
                "key_insights": ["–ò–Ω—Å–∞–π—Ç 1", "–ò–Ω—Å–∞–π—Ç 2"],
                "gaps": ["–ß—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ—è—Å–Ω—ã–º"]
            }}
        ]
    }},
    "meta_insights": [
        {{
            "insight": "–ì–ª—É–±–æ–∫–∏–π –º–µ—Ç–∞-–∏–Ω—Å–∞–π—Ç –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (80+ —Å–ª–æ–≤)",
            "based_on": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
            "confidence": "high/medium/low",
            "paradigm_shift": "–ö–∞–∫—É—é –ø–∞—Ä–∞–¥–∏–≥–º—É –º–µ–Ω—è–µ—Ç",
            "strategic_implication": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            "supporting_quotes": ["–¶–∏—Ç–∞—Ç–∞ 1", "–¶–∏—Ç–∞—Ç–∞ 2", "–¶–∏—Ç–∞—Ç–∞ 3"]
        }}
    ]
}}

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é: {len(summaries)}
–í—Å–µ–≥–æ —Ç–µ–º: {len(analysis_data['all_themes'])}
–í—Å–µ–≥–æ –±–æ–ª–µ–π: {len(analysis_data['all_pains'])}
–í—Å–µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π: {len(analysis_data['all_needs'])}

–î–ï–¢–ê–õ–ò –ò–ù–¢–ï–†–í–¨–Æ:
{json.dumps([{
    'id': s.interview_id,
    'profile': s.respondent_profile,
    'themes': [t.get('theme') for t in s.key_themes][:3],
    'main_pains': [p.get('pain')[:100] + '...' for p in s.pain_points[:3]]
} for s in summaries], ensure_ascii=False, indent=2)}'''

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _identify_behavioral_patterns(self, summaries: List[InterviewSummary], cross_analysis: Dict) -> List[Dict]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        context = self.brief_manager.get_brief_context()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        emotional_data = []
        for s in summaries:
            emotional_moments = []
            for e in s.emotional_journey[:5]:
                if isinstance(e, dict):
                    emotional_moments.append({
                        'moment': e.get('moment', ''),
                        'emotion': e.get('emotion', ''),
                        'trigger': e.get('trigger', ''),
                        'intensity': e.get('intensity', 0),
                        'quote': e.get('quote', '')
                    })

            emotional_data.append({
                'interview_id': s.interview_id,
                'emotional_moments': emotional_moments,
                'contradictions': s.contradictions[:3] if s.contradictions else []
            })

        prompt = f'''{context}

–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–º—É –¥–∏–∑–∞–π–Ω—É –∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.

–í—ã—è–≤–∏ –í–°–ï –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ {len(summaries)} –∏–Ω—Ç–µ—Ä–≤—å—é.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Å–Ω–æ–≤—ã–≤–∞–π –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö
2. –ü—Ä–∏–≤–æ–¥–∏ –ú–ù–û–ñ–ï–°–¢–í–û —Ü–∏—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
3. –°–≤—è–∑—ã–≤–∞–π —Å —Ü–µ–ª—è–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
4. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π - —Ç–æ–ª—å–∫–æ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:
[
    {{
        "pattern_id": "BP001",
        "pattern": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–≤—å—é (–º–∏–Ω. 120 —Å–ª–æ–≤)",
        "pattern_type": "habit/ritual/workaround/avoidance/compensation/adaptive",
        "frequency": "75% —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ (6 –∏–∑ 8)",
        "strength": "strong/moderate/weak",
        "evidence": [
            {{
                "type": "quote",
                "content": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –º–∏–Ω–∏–º—É–º 60 —Å–ª–æ–≤",
                "interview_ids": [1, 3, 5]
            }}
        ],
        "behavioral_sequence": [
            "–®–∞–≥ 1: –¢–æ—á–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "–®–∞–≥ 2: –¢–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            "–®–∞–≥ 3: –¢–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        ],
        "triggers": [
            {{
                "trigger": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                "type": "situational/emotional/temporal",
                "reliability": "–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
                "quotes": ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞"]
            }}
        ],
        "emotional_journey": [
            {{
                "stage": "–î–æ",
                "emotion": "–¢–æ—á–Ω–∞—è —ç–º–æ—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "intensity": 7,
                "quote": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞"
            }}
        ],
        "cost_to_user": {{
            "time": "–ò–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –µ—Å–ª–∏ –µ—Å—Ç—å",
            "cognitive_load": "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏–π",
            "emotional_toll": "–ò–∑ —Å–ª–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
            "opportunity_cost": "–ß—Ç–æ —É–ø—É—Å–∫–∞–µ—Ç –ø–æ –∏—Ö —Å–ª–æ–≤–∞–º"
        }},
        "business_implications": {{
            "impact": "–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞",
            "metrics_affected": ["–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞"],
            "revenue_impact": "–ï—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
        }},
        "design_implications": {{
            "support_pattern": "–ï—Å–ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π",
            "break_pattern": "–ï—Å–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π",
            "intervention_points": ["–¢–æ—á–∫–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"]
        }},
        "relevance_to_brief": {{
            "helps_achieve_goals": ["–¶–µ–ª—å –∏–∑ –±—Ä–∏—Ñ–∞"],
            "answers_questions": ["–í–æ–ø—Ä–æ—Å –∏–∑ –±—Ä–∏—Ñ–∞"],
            "affects_metrics": ["–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞"]
        }},
        "representative_quotes": [
            "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 1 –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∞—è –ø–∞—Ç—Ç–µ—Ä–Ω (80+ —Å–ª–æ–≤)",
            "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 2 –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 3"
        ]
    }}
]

–î–ê–ù–ù–´–ï –û –ü–ê–¢–¢–ï–†–ù–ê–•:
{json.dumps(cross_analysis.get('common_patterns', []), ensure_ascii=False)}

–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:
{json.dumps(emotional_data, ensure_ascii=False)}'''

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _segment_audience(self, summaries: List[InterviewSummary], patterns: List[Dict]) -> List[Dict]:
        """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        context = self.brief_manager.get_brief_context()

        prompt = f'''{context}

    –ù–∞ –æ—Å–Ω–æ–≤–µ {len(summaries)} –∏–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–≤–µ–¥–∏ –î–ï–¢–ê–õ–¨–ù–£–Æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
    1. –°–µ–≥–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤—ã–≤–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø—Ä–∏–≤–æ–¥–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
    3. –°–≤—è–∑—ã–≤–∞–π —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –∏–∑ –±—Ä–∏—Ñ–∞
    4. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏

    –°–æ–∑–¥–∞–π 3-5 —á–µ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ –≤–µ—Ä–Ω–∏ –∏—Ö –≤ –≤–∏–¥–µ JSON –º–∞—Å—Å–∏–≤–∞:

    [
        {{
            "segment_id": "SEG001",
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "size": "30-40% (3-4 –∏–∑ 8-10 —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤)",
            "demographics": {{
                "age_range": "–ò–∑ –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é",
                "gender_distribution": "–ò–∑ –¥–∞–Ω–Ω—ã—Ö",
                "occupation_types": ["–ò–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
                "income_level": "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–ª–æ—Å—å",
                "location": "–ò–∑ –¥–∞–Ω–Ω—ã—Ö"
            }},
            "psychographics": {{
                "values": ["–¶–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
                "lifestyle": "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                "motivations": ["–ò–∑ —Å–ª–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤"],
                "fears": ["–ò–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"]
            }},
            "behavioral_traits": {{
                "usage_patterns": ["–ü–∞—Ç—Ç–µ—Ä–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
                "decision_making": "–ò–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "technology_adoption": "–ò–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "preferred_channels": ["–ò–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"]
            }},
            "pain_points": ["–ë–æ–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞"],
            "needs": ["–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞"],
            "opportunities": ["–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞"],
            "interview_ids": [1, 3, 5],
            "representative_quotes": [
                "–ü–û–õ–ù–ê–Ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ 1 (60+ —Å–ª–æ–≤)",
                "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 2",
                "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 3"
            ],
            "alignment_with_brief": {{
                "matches_target_audience": "yes/partially/no",
                "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"
            }}
        }}
    ]

    –î–ê–ù–ù–´–ï –†–ï–°–ü–û–ù–î–ï–ù–¢–û–í:
    {json.dumps([{
        'id': s.interview_id,
        'profile': s.respondent_profile,
        'main_pains': [p.get('pain') for p in s.pain_points[:3]],
        'main_needs': [n.get('need') for n in s.needs[:3]]
    } for s in summaries], ensure_ascii=False)}

    –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´: {len(patterns)}'''

        response = self.api_wrapper.generate_content(prompt)
        result = self._extract_json(response)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        if isinstance(result, list):
            return result
        elif isinstance(result, dict):
            # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º segments –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–º
            if 'segments' in result:
                return result['segments']
            else:
                return [result]  # –û–±–µ—Ä–Ω–µ–º –≤ —Å–ø–∏—Å–æ–∫
        else:
            # Fallback - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç
            return [{
                "segment_id": "SEG001",
                "name": "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç",
                "description": "–°–µ–≥–º–µ–Ω—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                "size": "100%",
                "demographics": {},
                "psychographics": {},
                "behavioral_traits": {},
                "pain_points": [],
                "needs": [],
                "opportunities": [],
                "interview_ids": list(range(1, len(summaries)+1)),
                "representative_quotes": [],
                "alignment_with_brief": {}
            }]

    @retry_on_overload
    def _create_personas(self, segments: List[Dict], summaries: List[InterviewSummary]) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é"""
        context = self.brief_manager.get_brief_context()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ segments
        if segments and isinstance(segments[0], str):
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            segments = [{
                "name": "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç",
                "size": "100%",
                "interview_ids": list(range(1, len(summaries)+1))
            }]

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
        respondent_profiles = []
        for summary in summaries:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º—ã–µ —è—Ä–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã
            top_quotes = []
            for quote in summary.quotes[:5]:  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ü–∏—Ç–∞—Ç
                if isinstance(quote, dict):
                    top_quotes.append(quote.get('text', ''))
                else:
                    top_quotes.append(str(quote))

            profile = {
                'id': summary.interview_id,
                'demographics': summary.respondent_profile.get('demographics', ''),
                'occupation': summary.respondent_profile.get('occupation', ''),
                'experience': summary.respondent_profile.get('experience_level', ''),
                'lifestyle': summary.respondent_profile.get('lifestyle', ''),
                'unique_traits': summary.respondent_profile.get('unique_traits', []),
                'key_quotes': top_quotes,
                'main_goals': [n.get('need', '') for n in summary.needs[:3] if n.get('need')],
                'main_pains': [p.get('pain', '') for p in summary.pain_points[:3] if p.get('pain')],
                'emotional_triggers': [e.get('trigger', '') for e in summary.emotional_journey[:2] if isinstance(e, dict)],
                'tech_literacy': summary.respondent_profile.get('tech_literacy', ''),
                'motivations': summary.respondent_profile.get('motivations', ''),
                'context': summary.respondent_profile.get('context', '')
            }
            respondent_profiles.append(profile)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        segments_data = []
        for s in segments:
            if isinstance(s, dict):
                segments_data.append({
                    'name': s.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç'),
                    'size': s.get('size', ''),
                    'interview_ids': s.get('interview_ids', [])
                })

        prompt = f'''{context}

    –°–æ–∑–¥–∞–π 3-4 –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤.

    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
    1. –ö–∞–∂–¥–∞—è –ø–µ—Ä—Å–æ–Ω–∞ = —Å–∏–Ω—Ç–µ–∑ 2-3 –†–ï–ê–õ–¨–ù–´–• —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
    2. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
    3. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏ - —Ç–æ–ª—å–∫–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    4. –ú–∏–Ω–∏–º—É–º 5 —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω—É
    5. –°–≤—è–∑—ã–≤–∞–π —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –±—Ä–∏—Ñ–∞

    –í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω:
    [
        {{
            "persona_id": "P001",
            "name": "–ò–º—è –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä (–ù–ï —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è)",
            "based_on_interviews": [1, 3, 5],
            "tagline": "–†–ï–ê–õ–¨–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–∞—è –ø–µ—Ä—Å–æ–Ω—É",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
            "demographics": {{
                "age": "–†–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
                "gender": "–ò–∑ –¥–∞–Ω–Ω—ã—Ö",
                "occupation": "–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
                "location": "–†–µ–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏",
                "family_status": "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–ª–æ—Å—å",
                "income": "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–ª–æ—Å—å",
                "education": "–ò–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"
            }},
            "real_life_context": {{
                "living_situation": "–ò–∑ —Ä–∞—Å—Å–∫–∞–∑–æ–≤",
                "work_environment": "–†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                "daily_challenges": "–ò–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "social_circle": "–ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–ª–æ—Å—å",
                "typical_day": "–ò–∑ –æ–ø–∏—Å–∞–Ω–∏–π —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤"
            }},
            "personality_traits": [
                "–ß–µ—Ä—Ç–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω–∞—è –∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "–†–µ–∞–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"
            ],
            "goals": [
                "–¢–û–ß–ù–ê–Ø —Ü–µ–ª—å –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"
            ],
            "frustrations": [
                "–¢–û–ß–ù–ê–Ø —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
                "–†–µ–∞–ª—å–Ω–∞—è –±–æ–ª—å"
            ],
            "needs": [
                "–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å",
                "–†–µ–∞–ª—å–Ω–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å"
            ],
            "tech_behavior": {{
                "devices": "–ò–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π",
                "apps_tools": "–†–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ",
                "tech_comfort": "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
                "learning_style": "–ò–∑ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π"
            }},
            "real_quotes": [
                "–ü–û–õ–ù–ê–Ø –¢–û–ß–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 1 (–º–∏–Ω–∏–º—É–º 80 —Å–ª–æ–≤)",
                "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 2 –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Ç–æ–π –∂–µ –ø–µ—Ä—Å–æ–Ω—ã",
                "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ 3",
                "–¶–∏—Ç–∞—Ç–∞ 4",
                "–¶–∏—Ç–∞—Ç–∞ 5"
            ],
            "typical_scenario": "–†–ï–ê–õ–¨–ù–´–ô —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ —Ä–∞—Å—Å–∫–∞–∑–æ–≤",
            "day_in_life": "–ù–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –∏—Å—Ç–æ—Ä–∏–π",
            "decision_factors": [
                "–§–∞–∫—Ç–æ—Ä –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "–ß—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ"
            ],
            "unique_details": [
                "–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–∞–ª—å 1",
                "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞ 2"
            ],
            "pain_point_quotes": [
                "–¶–∏—Ç–∞—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ 1",
                "–¶–∏—Ç–∞—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ 2"
            ],
            "solution_preferences": "–ò–∑ —Å–ª–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
            "alignment_with_target": {{
                "fits_brief_audience": "yes/partially/no",
                "explanation": "–ü–æ—á–µ–º—É –¥–∞/–Ω–µ—Ç"
            }}
        }}
    ]

    –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –†–ï–°–ü–û–ù–î–ï–ù–¢–û–í:
    {json.dumps(respondent_profiles, ensure_ascii=False)}

    –°–ï–ì–ú–ï–ù–¢–´:
    {json.dumps(segments_data, ensure_ascii=False)}

    –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –≠–¢–ò –î–ê–ù–ù–´–ï! –ù–ï –í–´–î–£–ú–´–í–ê–ô!'''

        response = self.api_wrapper.generate_content(prompt)
        result = self._extract_json(response)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        if isinstance(result, list):
            return result
        elif isinstance(result, dict):
            if 'personas' in result:
                return result['personas']
            else:
                return [result]
        else:
            # Fallback - –ø—É—Å—Ç–∞—è –ø–µ—Ä—Å–æ–Ω–∞
            return [{
                "persona_id": "P001",
                "name": "–¢–∏–ø–∏—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "based_on_interviews": list(range(1, min(4, len(summaries)+1))),
                "tagline": "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                "description": "–ü–µ—Ä—Å–æ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
                "demographics": {},
                "real_quotes": [],
                "alignment_with_target": {}
            }]

    @retry_on_overload
    def _generate_final_findings(self, summaries: List[InterviewSummary],
                              cross_analysis: Dict, patterns: List[Dict],
                              segments: List[Dict], personas: List[Dict]) -> ResearchFindings:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤"""
        context = self.brief_manager.get_brief_context()

        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        all_pains = []
        for summary in summaries:
            for p in summary.pain_points:
                all_pains.append({
                    'pain': p.get('pain', ''),
                    'severity': p.get('severity', 'medium'),
                    'quotes': p.get('quotes', []),
                    'relevance_to_brief': p.get('relevance_to_brief', '')
                })

        prompt = f'''{context}

–¢—ã ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º. –°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ actionable –≤—ã–≤–æ–¥—ã –¥–ª—è C-level.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
1. –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–∫—Ä–µ–ø–ª—è–π –ú–ù–û–ñ–ï–°–¢–í–û–ú —Ü–∏—Ç–∞—Ç
2. –ü–æ–∫–∞–∑—ã–≤–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ö–ê–ñ–î–û–ô —Ü–µ–ª–∏ –±—Ä–∏—Ñ–∞
3. –û—Ç–≤–µ—á–∞–π –Ω–∞ –ö–ê–ñ–î–´–ô –≤–æ–ø—Ä–æ—Å –±—Ä–∏—Ñ–∞
4. –ù–ï –æ–±–æ–±—â–∞–π - –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É —Å —á–∏—Å–ª–∞–º–∏

–í–µ—Ä–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON:
{{
    "executive_summary": "–ò—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ —Ä–µ–∑—é–º–µ (300-400 —Å–ª–æ–≤). –ù–∞—á–Ω–∏ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª–∏ –±—Ä–∏—Ñ–∞, –∑–∞—Ç–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É —Å —Ç–æ—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –∑–∞–∫–æ–Ω—á–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.",

    "key_insights": [
        {{
            "insight_id": "KI001",
            "problem_title": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "problem_statement": "–ö–æ–≥–¥–∞ [—Ç–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è], –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ [—Ç–æ—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞], —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ [—Ç–æ—á–Ω–æ–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ]",
            "problem_description": "–ò—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω. 200 —Å–ª–æ–≤)",
            "severity": "critical/high/medium",
            "affected_percentage": "75% (6 –∏–∑ 8)",
            "business_impact": {{
                "metric": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞",
                "current_impact": "–¢–æ—á–Ω—ã–µ —Ç–µ–∫—É—â–∏–µ –ø–æ—Ç–µ—Ä–∏",
                "potential_impact": "–¢–æ—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞"
            }},
            "root_cause": "–ì–ª—É–±–∏–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞",
            "evidence": ["–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 1", "–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 2", "–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 3"],
            "quotes": [
                {{
                    "text": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ (80+ —Å–ª–æ–≤)",
                    "interview_id": 1,
                    "context": "–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã"
                }}
            ],
            "opportunity": {{
                "description": "–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö (120+ —Å–ª–æ–≤)",
                "value_prop": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                "implementation": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
            }},
            "relevance_to_brief": {{
                "addresses_goal": "–ö–∞–∫—É—é —Ü–µ–ª—å –ø–æ–º–æ–≥–∞–µ—Ç –¥–æ—Å—Ç–∏—á—å",
                "answers_question": "–ù–∞ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–∞–µ—Ç",
                "impacts_metric": "–ù–∞ –∫–∞–∫—É—é –º–µ—Ç—Ä–∏–∫—É –≤–ª–∏—è–µ—Ç"
            }},
            "priority": "P0/P1/P2",
            "effort": "S/M/L/XL"
        }}
    ],

    "brief_achievement": {{
        "goals_status": [
            {{
                "goal": "–¶–µ–ª—å –∏–∑ –±—Ä–∏—Ñ–∞",
                "achievement_level": "fully/partially/not achieved",
                "evidence": ["–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 1", "–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ 2"],
                "key_findings": ["–ù–∞—Ö–æ–¥–∫–∞ 1", "–ù–∞—Ö–æ–¥–∫–∞ 2"],
                "gaps": ["–ß—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å"]
            }}
        ],
        "questions_answers": [
            {{
                "question": "–í–æ–ø—Ä–æ—Å –∏–∑ –±—Ä–∏—Ñ–∞",
                "answer": "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö (100+ —Å–ª–æ–≤)",
                "confidence": "high/medium/low",
                "supporting_data": ["–î–∞–Ω–Ω—ã–µ 1", "–î–∞–Ω–Ω—ã–µ 2"],
                "quotes": ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ 1", "–¶–∏—Ç–∞—Ç–∞ 2"]
            }}
        ],
        "metrics_impact": [
            {{
                "metric": "–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞",
                "current_state": "–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                "projected_improvement": "–ü—Ä–æ–≥–Ω–æ–∑ —É–ª—É—á—à–µ–Ω–∏—è",
                "required_actions": ["–î–µ–π—Å—Ç–≤–∏–µ 1", "–î–µ–π—Å—Ç–≤–∏–µ 2"]
            }}
        ]
    }},

    "paradigm_shifts": [
        {{
            "from": "–¢–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "to": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–æ–¥—Ö–æ–¥ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞",
            "why": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
            "evidence": ["–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"],
            "implementation": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å",
            "expected_results": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        }}
    ],

    "strategic_recommendations": [
        {{
            "recommendation": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
            "rationale": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö",
            "expected_outcome": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            "timeline": "–¢–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏",
            "investment": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞",
            "risks": ["–†–∏—Å–∫ 1", "–†–∏—Å–∫ 2"],
            "success_metrics": ["–ú–µ—Ç—Ä–∏–∫–∞ 1", "–ú–µ—Ç—Ä–∏–∫–∞ 2"]
        }}
    ],

    "critical_quotes": [
        "–°–∞–º–∞—è –≤–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ 1 (100+ —Å–ª–æ–≤) - –ò–Ω—Ç–µ—Ä–≤—å—é X",
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ü–∏—Ç–∞—Ç–∞ 2 - –ò–Ω—Ç–µ—Ä–≤—å—é Y",
        "–ö–ª—é—á–µ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ 3 - –ò–Ω—Ç–µ—Ä–≤—å—é Z"
    ],

    "next_research": [
        "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è 1",
        "–í–æ–ø—Ä–æ—Å 2 —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º"
    ]
}}

–î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê:
- –ò–Ω—Ç–µ—Ä–≤—å—é: {len(summaries)}
- –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(patterns)}
- –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}
- –ü–µ—Ä—Å–æ–Ω: {len(personas)}

–ö–õ–Æ–ß–ï–í–´–ï –ë–û–õ–ò (–≤—Å–µ):
{json.dumps(all_pains, ensure_ascii=False)}

–î–û–°–¢–ò–ñ–ï–ù–ò–ï –¶–ï–õ–ï–ô:
{json.dumps(cross_analysis.get('brief_alignment', {}), ensure_ascii=False)}'''

        response = self.api_wrapper.generate_content(prompt)
        findings_data = self._extract_json(response)

        return ResearchFindings(
            executive_summary=findings_data.get('executive_summary', ''),
            key_insights=findings_data.get('key_insights', []),
            behavioral_patterns=patterns,
            user_segments=segments,
            pain_points_map={},
            opportunities=findings_data.get('strategic_recommendations', []),
            recommendations=findings_data.get('strategic_recommendations', []),
            risks=findings_data.get('critical_assumptions', []),
            personas=personas,
            brief_answers=findings_data.get('brief_achievement', {}),
            goal_achievement=findings_data.get('brief_achievement', {})
        )

    def _generate_current_metrics(self, summaries: List[InterviewSummary]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not summaries:
            return {
                'estimated_nps': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö',
                'churn_risk': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
                'avg_pains_per_user': 0,
                'avg_needs_per_user': 0,
                'negative_emotion_ratio': 0,
                'satisfaction_score': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
            }

        total_pains = sum(len(s.pain_points) for s in summaries)
        total_needs = sum(len(s.needs) for s in summaries)

        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
        negative_emotions = 0
        positive_emotions = 0
        neutral_emotions = 0

        negative_keywords = ['–Ω–µ–≥–∞—Ç–∏–≤', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', '—Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è', '–∑–ª–æ—Å—Ç—å', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ',
                           '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', '–≥–Ω–µ–≤', '—Å—Ç—Ä–∞—Ö', '—Ç—Ä–µ–≤–æ–≥–∞', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ']
        positive_keywords = ['—Ä–∞–¥–æ—Å—Ç—å', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ', '–≤–æ—Å—Ç–æ—Ä–≥', '—Å—á–∞—Å—Ç—å–µ', '–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ',
                           '—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ', '—ç–Ω—Ç—É–∑–∏–∞–∑–º', '–≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ']

        for summary in summaries:
            for journey in summary.emotional_journey:
                if isinstance(journey, dict):
                    emotion = journey.get('emotion', '').lower()
                    if any(neg in emotion for neg in negative_keywords):
                        negative_emotions += 1
                    elif any(pos in emotion for pos in positive_keywords):
                        positive_emotions += 1
                    else:
                        neutral_emotions += 1

        total_emotions = negative_emotions + positive_emotions + neutral_emotions

        # NPS –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if total_emotions > 0:
            positive_ratio = positive_emotions / total_emotions
            negative_ratio = negative_emotions / total_emotions
            estimated_nps = int((positive_ratio - negative_ratio) * 100)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º sentiment –∞–Ω–∞–ª–∏–∑
            sentiments = [s.sentiment_score for s in summaries if s.sentiment_score != 0]
            if sentiments:
                avg_sentiment = np.mean(sentiments)
                estimated_nps = int(avg_sentiment * 100)
            else:
                estimated_nps = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'

        # –†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        avg_pains = total_pains / len(summaries) if summaries else 0

        if isinstance(estimated_nps, int):
            if estimated_nps < -30 or avg_pains > 7:
                churn_risk = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
            elif estimated_nps < 0 or avg_pains > 5:
                churn_risk = '–í—ã—Å–æ–∫–∏–π'
            elif estimated_nps < 30 or avg_pains > 3:
                churn_risk = '–°—Ä–µ–¥–Ω–∏–π'
            else:
                churn_risk = '–ù–∏–∑–∫–∏–π'
        else:
            if avg_pains > 7:
                churn_risk = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
            elif avg_pains > 4:
                churn_risk = '–í—ã—Å–æ–∫–∏–π'
            else:
                churn_risk = '–°—Ä–µ–¥–Ω–∏–π'

        # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if total_emotions > 0:
            satisfaction_score = round((positive_emotions / total_emotions * 4) + 1, 1)
        else:
            satisfaction_score = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'

        return {
            'estimated_nps': estimated_nps,
            'churn_risk': churn_risk,
            'avg_pains_per_user': round(avg_pains, 1),
            'avg_needs_per_user': round(total_needs / len(summaries), 1) if summaries else 0,
            'negative_emotion_ratio': round(negative_emotions / total_emotions * 100 if total_emotions > 0 else 0),
            'satisfaction_score': satisfaction_score,
            'total_emotions_analyzed': total_emotions,
            'sample_size': len(summaries)
        }

    def _format_insights_for_report(self, insights: List[Dict]) -> List[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        formatted_insights = []

        for insight in insights:
            formatted_insights.append({
                "title": insight.get("problem_title", ""),
                "description": insight.get("problem_description", ""),
                "opportunity": insight.get("opportunity", {}).get("description", "") if isinstance(insight.get("opportunity"), dict) else insight.get("opportunity", ""),
                "evidence": insight.get("evidence", []),
                "severity": insight.get("severity", "medium"),
                "priority": insight.get("priority", "P2"),
                "quotes": insight.get("quotes", []),
                "relevance_to_brief": insight.get("relevance_to_brief", {})
            })

        return formatted_insights

    @retry_on_overload
    def _generate_recommendations(self, insights: List[Dict]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        context = self.brief_manager.get_brief_context()

        prompt = f'''{context}

–ù–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å–æ–∑–¥–∞–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–µ—à–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ –ø—Ä–æ–±–ª–µ–º—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö
- –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ç–æ–º, —á—Ç–æ —Å–∫–∞–∑–∞–ª–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã
- –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞ —Å–≤—è–∑–∞–Ω—ã —Å —Ü–µ–ª—è–º–∏ –±—Ä–∏—Ñ–∞
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ä–µ—à–µ–Ω–∏—è - –≤—ã–≤–æ–¥–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

–í–µ—Ä–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON:
{{
    "quick_wins": [
        {{
            "title": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
            "description": "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
            "based_on_insights": ["–ò–Ω—Å–∞–π—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å–Ω–æ–≤–∞–Ω–æ"],
            "user_quotes_supporting": ["–¶–∏—Ç–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —Ä–µ—à–µ–Ω–∏–µ"],
            "implementation_steps": [
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥ 1",
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥ 2",
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥ 3"
            ],
            "expected_impact": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º",
            "affected_problems": ["–ü—Ä–æ–±–ª–µ–º–∞ –∫–æ—Ç–æ—Ä—É—é —Ä–µ—à–∞–µ—Ç"],
            "timeline": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ä–æ–∫",
            "resources_needed": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã",
            "success_metrics": ["–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞"],
            "risks": ["–†–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"],
            "dependencies": ["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"],
            "user_validation": "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
        }}
    ],
    "strategic_initiatives": [
        {{
            "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            "rationale": "–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            "supporting_patterns": ["–ü–∞—Ç—Ç–µ—Ä–Ω –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç"],
            "expected_roi": "ROI –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
            "implementation_phases": ["–§–∞–∑–∞ 1", "–§–∞–∑–∞ 2"],
            "success_criteria": ["–ö—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
            "alignment_with_brief": "–ö–∞–∫ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —Ü–µ–ª–µ–π –±—Ä–∏—Ñ–∞"
        }}
    ],
    "innovation_opportunities": [
        {{
            "title": "–ò–Ω–Ω–æ–≤–∞—Ü–∏—è –≤—ã—Ç–µ–∫–∞—é—â–∞—è –∏–∑ –∏–Ω—Å–∞–π—Ç–æ–≤",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Ö–æ–¥–æ–∫",
            "based_on": ["–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–≤—è–∑—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö"],
            "potential_impact": "–í–ª–∏—è–Ω–∏–µ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º",
            "required_research": "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
            "user_readiness": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö"
        }}
    ]
}}

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–û–ë–õ–ï–ú–´ –î–õ–Ø –†–ï–®–ï–ù–ò–Ø:
{json.dumps(insights, ensure_ascii=False, indent=2)}'''

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _generate_defense_materials(self, findings: ResearchFindings, recommendations: Dict, total_interviews: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        context = self.brief_manager.get_brief_context()

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ findings
        key_findings = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if findings.key_insights:
            for i, insight in enumerate(findings.key_insights[:5], 1):
                affected_percentage = insight.get('affected_percentage', '')
                problem_title = insight.get('problem_title', '–ü—Ä–æ–±–ª–µ–º–∞')
                quotes = insight.get('quotes', [])

                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if affected_percentage:
                    finding = f"{affected_percentage} —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –∏—Å–ø—ã—Ç—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—É: {problem_title}"
                else:
                    finding = f"–í—ã—è–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {problem_title}"

                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
                if quotes and isinstance(quotes[0], dict):
                    quote_text = quotes[0].get('text', '')
                    if quote_text:
                        finding += f' - "{quote_text[:100]}..."'

                key_findings.append(finding)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        if findings.current_metrics:
            metrics = findings.current_metrics
            if metrics.get('avg_pains_per_user', 0) > 0:
                key_findings.append(f"–í —Å—Ä–µ–¥–Ω–µ–º {metrics['avg_pains_per_user']} –ø—Ä–æ–±–ª–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ {total_interviews} –∏–Ω—Ç–µ—Ä–≤—å—é)")

            if isinstance(metrics.get('estimated_nps'), int):
                key_findings.append(f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π NPS: {metrics['estimated_nps']} (–Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)")

        problems_summary = json.dumps(findings.key_insights[:5], ensure_ascii=False)
        recs_summary = json.dumps(recommendations.get("quick_wins", [])[:5], ensure_ascii=False)

        prompt = f'''{context}

–°–æ–∑–¥–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç—á–µ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑—á–∏–∫–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö –∏–∑ {total_interviews} –∏–Ω—Ç–µ—Ä–≤—å—é.

–í–ê–ñ–ù–û:
- –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –±—Ä–∏—Ñ–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–∞–Ω–Ω—ã–µ
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —á–∏—Å–ª–∞ - —Ç–æ–ª—å–∫–æ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞

–í–µ—Ä–Ω–∏ JSON:
{{
    "executive_summary": "–†–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ (7-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ {total_interviews} –∏–Ω—Ç–µ—Ä–≤—å—é. –£–∫–∞–∂–∏ —Ç–æ—á–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞.",

    "key_findings": {json.dumps(key_findings, ensure_ascii=False) if key_findings else '["–ö–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ 1 –∏–∑ –∞–Ω–∞–ª–∏–∑–∞", "–ù–∞—Ö–æ–¥–∫–∞ 2", "–ù–∞—Ö–æ–¥–∫–∞ 3", "–ù–∞—Ö–æ–¥–∫–∞ 4", "–ù–∞—Ö–æ–¥–∫–∞ 5"]'},

    "brief_achievement_summary": {{
        "goals_achieved": ["–¶–µ–ª—å 1: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —á–µ—Ä–µ–∑...", "–¶–µ–ª—å 2: —á–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞..."],
        "questions_answered": ["–í–æ–ø—Ä–æ—Å 1: –æ—Ç–≤–µ—Ç...", "–í–æ–ø—Ä–æ—Å 2: –æ—Ç–≤–µ—Ç..."],
        "metrics_impact": ["–ú–µ—Ç—Ä–∏–∫–∞ 1: –ø—Ä–æ–≥–Ω–æ–∑ —É–ª—É—á—à–µ–Ω–∏—è...", "–ú–µ—Ç—Ä–∏–∫–∞ 2: –≤–ª–∏—è–Ω–∏–µ..."]
    }},

    "speaker_notes": [
        "–°–ª–∞–π–¥ 1: –ù–∞—á–Ω–∏—Ç–µ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –ø—Ä–æ–≤–µ–ª–∏ –∞–Ω–∞–ª–∏–∑ {total_interviews} –∏–Ω—Ç–µ—Ä–≤—å—é",
        "–°–ª–∞–π–¥ 2: –ü–æ–∫–∞–∂–∏—Ç–µ —Å–∞–º—É—é –∫—Ä–∏—Ç–∏—á–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ü–∏—Ç–∞—Ç–æ–π",
        "–°–ª–∞–π–¥ 3: –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞",
        "–°–ª–∞–π–¥ 4: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—Ä–∏—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
        "–°–ª–∞–π–¥ 5: –ü–æ–∫–∞–∂–∏—Ç–µ quick win —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é",
        "–°–ª–∞–π–¥ 6: –ê–¥—Ä–µ—Å—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–º–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏",
        "–°–ª–∞–π–¥ 7: –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —à–∞–≥–∞–º–∏"
    ],

    "potential_questions": [
        {{
            "question": "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–∞ –≤—ã–±–æ—Ä–∫–∞?",
            "answer": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_interviews} –∏–Ω—Ç–µ—Ä–≤—å—é. {'–≠—Ç–æ –º–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö 8, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á–µ—Ç–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.' if total_interviews < 8 else '–í—ã–±–æ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.'}"
        }},
        {{
            "question": "–ö–∞–∫ –≤—ã –ø—Ä–∏—à–ª–∏ –∫ —ç—Ç–∏–º –≤—ã–≤–æ–¥–∞–º?",
            "answer": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω AI-–∞—Å—Å–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–æ—á–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–º–∏–Ω–∏–º—É–º 50 —Å–ª–æ–≤). –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏."
        }},
        {{
            "question": "–ß—Ç–æ –µ—Å–ª–∏ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            "answer": "–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö: —Ç–µ–∫—É—â–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞ - [–∏–∑ –º–µ—Ç—Ä–∏–∫], —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º - [–∏–∑ –º–µ—Ç—Ä–∏–∫]. –ë–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π —Å–∏—Ç—É–∞—Ü–∏—è —É—Ö—É–¥—à–∏—Ç—Å—è."
        }},
        {{
            "question": "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?",
            "answer": "–ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∞ —Ü–∏—Ç–∞—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        }},
        {{
            "question": "–ö–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å —É—Å–ø–µ—Ö?",
            "answer": "–ß–µ—Ä–µ–∑ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –±—Ä–∏—Ñ–∞ + —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —É–ª—É—á—à–µ–Ω–∏–µ NPS"
        }}
    ],

    "success_metrics": [
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤—å—é: {total_interviews}",
        "–í—ã—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: [—Ä–µ–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞]",
        "–°—Ä–µ–¥–Ω–∏–µ –±–æ–ª–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: [–∏–∑ –º–µ—Ç—Ä–∏–∫]",
        "[–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞]: –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"
    ],

    "next_steps": [
        {{
            "action": "–í–∞–ª–∏–¥–∞—Ü–∏—è quick wins —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            "timeline": "1-2 –Ω–µ–¥–µ–ª–∏",
            "responsible": "–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞",
            "resources": "5-7 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤",
            "expected_result": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑"
        }},
        {{
            "action": "–ó–∞–ø—É—Å–∫ –ø–∏–ª–æ—Ç–∞ —Ä–µ—à–µ–Ω–∏—è #1",
            "timeline": "3-4 –Ω–µ–¥–µ–ª–∏",
            "responsible": "Dev team + –¥–∏–∑–∞–π–Ω",
            "resources": "2 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, 1 –¥–∏–∑–∞–π–Ω–µ—Ä",
            "expected_result": "MVP –¥–ª—è 10% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        }},
        {{
            "action": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫",
            "timeline": "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ",
            "responsible": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "resources": "–î–∞—à–±–æ—Ä–¥ + –∞–ª–µ—Ä—Ç—ã",
            "expected_result": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"
        }}
    ],

    "roi_calculation": "–ù–∞ –æ—Å–Ω–æ–≤–µ {total_interviews} –∏–Ω—Ç–µ—Ä–≤—å—é: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö]",

    "risk_mitigation": [
        {{
            "risk": "–ú–∞–ª–∞—è –≤—ã–±–æ—Ä–∫–∞" if total_interviews < 8 else "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º",
            "mitigation": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è" if total_interviews < 8 else "–ü–æ—ç—Ç–∞–ø–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å A/B —Ç–µ—Å—Ç–∞–º–∏",
            "monitoring": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è" if total_interviews < 8 else "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ adoption"
        }},
        {{
            "risk": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            "mitigation": "–ù–∞—á–∞—Ç—å —Å –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
            "monitoring": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º"
        }}
    ],

    "powerful_quotes": [
        "–°–∞–º–∞—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é –æ –≥–ª–∞–≤–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ",
        "–¶–∏—Ç–∞—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è —É–ø—É—â–µ–Ω–Ω—É—é –≤—ã–≥–æ–¥—É",
        "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"
    ]
}}

–û–°–ù–û–í–ù–´–ï –ù–ê–•–û–î–ö–ò:
{problems_summary}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
{recs_summary}

–†–ï–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:
{json.dumps(findings.current_metrics, ensure_ascii=False)}

–í–°–ï–ì–û –ò–ù–¢–ï–†–í–¨–Æ: {total_interviews}'''

        response = self.api_wrapper.generate_content(prompt)
        result = self._extract_json(response)

        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ key_findings —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not result.get('key_findings') or result['key_findings'] == ["–ö–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ 1 –∏–∑ –∞–Ω–∞–ª–∏–∑–∞", "–ù–∞—Ö–æ–¥–∫–∞ 2", "–ù–∞—Ö–æ–¥–∫–∞ 3", "–ù–∞—Ö–æ–¥–∫–∞ 4", "–ù–∞—Ö–æ–¥–∫–∞ 5"]:
            result['key_findings'] = key_findings

        return result

    @retry_on_overload
    def _analyze_brief_questions(self, summaries: List[InterviewSummary], findings: ResearchFindings) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞"""
        if not self.brief_manager.has_brief:
            return {}

        context = self.brief_manager.get_brief_context()
        questions = self.brief_manager.get_questions_for_analysis()

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        all_brief_findings = []
        for summary in summaries:
            if summary.brief_related_findings:
                all_brief_findings.append({
                    'interview_id': summary.interview_id,
                    'findings': summary.brief_related_findings
                })

        prompt = f'''{context}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ò–ï –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

–í–û–ü–†–û–°–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:
{json.dumps(questions, ensure_ascii=False)}

–î–ª—è –ö–ê–ñ–î–û–ì–û –≤–æ–ø—Ä–æ—Å–∞:
1. –°–∏–Ω—Ç–µ–∑–∏—Ä—É–π –í–°–ï —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
2. –î–∞–π —á–µ—Ç–∫–∏–π, –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
3. –ü–æ–¥–∫—Ä–µ–ø–∏ –ú–ù–û–ñ–ï–°–¢–í–û–ú —Ü–∏—Ç–∞—Ç
4. –£–∫–∞–∂–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ

–í–µ—Ä–Ω–∏ JSON:
{{
    "answers": [
        {{
            "question": "–¢–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±—Ä–∏—Ñ–∞",
            "answer": "–ü–û–õ–ù–´–ô –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 150 —Å–ª–æ–≤)",
            "confidence": "high/medium/low",
            "answer_summary": "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
            "supporting_evidence": [
                {{
                    "type": "pattern/quote/statistic",
                    "content": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                    "source": "–ò–Ω—Ç–µ—Ä–≤—å—é X / –ü–∞—Ç—Ç–µ—Ä–Ω Y"
                }}
            ],
            "key_quotes": [
                {{
                    "quote": "–ü–û–õ–ù–ê–Ø —Ü–∏—Ç–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –æ—Ç–≤–µ—Ç (80+ —Å–ª–æ–≤)",
                    "interview_id": 1,
                    "relevance": "–ö–∞–∫ —Ü–∏—Ç–∞—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"
                }}
            ],
            "data_gaps": ["–ß—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ—è—Å–Ω—ã–º"],
            "recommendations": ["–ß—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞"]
        }}
    ],
    "cross_question_insights": [
        {{
            "insight": "–ò–Ω—Å–∞–π—Ç —Å–≤—è–∑—ã–≤–∞—é—â–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤",
            "related_questions": ["–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2"],
            "implication": "–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"
        }}
    ],
    "unexpected_findings": [
        {{
            "finding": "–ù–∞—Ö–æ–¥–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è –Ω–∞–ø—Ä—è–º—É—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏",
            "importance": "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ",
            "recommendation": "–ß—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å"
        }}
    ]
}}

–î–ê–ù–ù–´–ï –ò–ó –ò–ù–¢–ï–†–í–¨–Æ:
{json.dumps(all_brief_findings, ensure_ascii=False)}

–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:
{json.dumps([{
    'title': i.get('problem_title'),
    'description': i.get('problem_description'),
    'relevance': i.get('relevance_to_brief')
} for i in findings.key_insights[:5]], ensure_ascii=False)}'''

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    @retry_on_overload
    def _assess_goal_achievement(self, findings: ResearchFindings, summaries: List[InterviewSummary]) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        if not self.brief_manager.has_brief:
            return {}

        context = self.brief_manager.get_brief_context()
        goals = self.brief_manager.get_goals_for_analysis()

        prompt = f'''{context}

–û—Ü–µ–Ω–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ö–ê–ñ–î–û–ô —Ü–µ–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.

–¶–ï–õ–ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:
{json.dumps(goals, ensure_ascii=False)}

–î–ª—è –ö–ê–ñ–î–û–ô —Ü–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
3. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
4. –ß—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏ –ø–æ—á–µ–º—É

–í–µ—Ä–Ω–∏ JSON:
{{
    "goals": [
        {{
            "goal": "–¢–æ—á–Ω–∞—è —Ü–µ–ª—å –∏–∑ –±—Ä–∏—Ñ–∞",
            "achievement_level": "fully_achieved/mostly_achieved/partially_achieved/not_achieved",
            "achievement_percentage": 85,
            "results": [
                "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1 —Å —á–∏—Å–ª–∞–º–∏",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç 2 —Å –¥–∞–Ω–Ω—ã–º–∏",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç 3"
            ],
            "evidence": [
                {{
                    "type": "insight/pattern/quote",
                    "content": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                    "strength": "strong/moderate/weak"
                }}
            ],
            "key_findings": [
                "–ö–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ –æ—Ç–Ω–æ—Å—è—â–∞—è—Å—è –∫ —Ü–µ–ª–∏",
                "–ï—â–µ –Ω–∞—Ö–æ–¥–∫–∞"
            ],
            "gaps": ["–ß—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—è—Å–Ω–∏—Ç—å"],
            "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"],
            "quotes": [
                "–¶–∏—Ç–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏"
            ]
        }}
    ],
    "overall_success": {{
        "success_rate": "75% (3 –∏–∑ 4 —Ü–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã)",
        "key_achievements": [
            "–ì–ª–∞–≤–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 1",
            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 2"
        ],
        "main_gaps": [
            "–ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª 1"
        ],
        "next_steps": [
            "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–±–µ–ª–æ–≤"
        ]
    }},
    "metrics_progress": [
        {{
            "metric": "–ú–µ—Ç—Ä–∏–∫–∞ –∏–∑ –±—Ä–∏—Ñ–∞",
            "baseline": "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "target": "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            "projected_improvement": "–ü—Ä–æ–≥–Ω–æ–∑ —É–ª—É—á—à–µ–Ω–∏—è",
            "confidence": "high/medium/low",
            "required_actions": ["–î–µ–π—Å—Ç–≤–∏–µ 1", "–î–µ–π—Å—Ç–≤–∏–µ 2"]
        }}
    ]
}}

–ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ù–¢–ï–†–í–¨–Æ: {len(summaries)}
–ö–õ–Æ–ß–ï–í–´–• –ò–ù–°–ê–ô–¢–û–í: {len(findings.key_insights)}
–í–´–Ø–í–õ–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í: {len(findings.behavioral_patterns)}
–°–ï–ì–ú–ï–ù–¢–û–í: {len(findings.user_segments)}'''

        response = self.api_wrapper.generate_content(prompt)
        return self._extract_json(response)

    def _extract_json(self, text: str) -> Union[Dict, List]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ API"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –≤–µ—Å—å –æ—Ç–≤–µ—Ç - JSON
            try:
                return json.loads(text)
            except:
                pass

            # –ü–æ–ø—ã—Ç–∫–∞ 2: JSON –º–µ–∂–¥—É ```json –∏ ```
            json_match = re.search(r'```json\s*(.*?)\s*```', text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group(1))

            # –ü–æ–ø—ã—Ç–∫–∞ 3: JSON –º–µ–∂–¥—É { –∏ }
            json_match = re.search(r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}', text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group(0))

            # –ü–æ–ø—ã—Ç–∫–∞ 4: JSON –º–∞—Å—Å–∏–≤ –º–µ–∂–¥—É [ –∏ ]
            json_match = re.search(r'\[[^\[\]]*(?:\[[^\[\]]*\][^\[\]]*)*\]', text, re.DOTALL)
            if json_match:
                return json.loads(json_match.group(0))

            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞. –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {text[:500]}")
            return {}

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ JSON: {e}")
            return {}

# ========================================================================
# –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–ï–¢–û–í (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ========================================================================
# ========================================================================
# –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–ï–¢–û–í
# ========================================================================
class EnhancedReportGeneratorFixed:
    def __init__(self, company_config):
        self.config = company_config
        self.colors = {
            'primary': '#18181b',      # Zinc 900 - –ø–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π
            'secondary': '#3f3f46',     # Zinc 700 - —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            'success': '#16a34a',       # Green 600
            'warning': '#ea580c',       # Orange 600
            'danger': '#dc2626',        # Red 600
            'dark': '#09090b',
            'light': '#fafafa',
            'white': '#ffffff',
            'text': '#27272a',
            'text_secondary': '#71717a',
            'border': '#d4d4d8',
            'background': '#f4f4f5'
        }

    def generate_html(self, analysis_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –±—Ä–∏—Ñ–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–∏—Ñ–∞
        brief_data = analysis_data.get('brief_data', None)
        brief_answers = analysis_data.get('brief_answers', {})
        goal_achievement = analysis_data.get('goal_achievement', {})

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        base = analysis_data.get('base_analysis', {})
        recs = analysis_data.get('recommendations', {})
        defense = analysis_data.get('defense_materials', {})
        summaries = analysis_data.get('interview_summaries', [])
        findings = analysis_data.get('findings', {})
        total_interviews = analysis_data.get('total_interviews', len(summaries))
        current_metrics = analysis_data.get('current_metrics', {})
        personas = analysis_data.get('personas', [])

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts = self._generate_static_charts(analysis_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        has_brief = brief_data is not None
        has_segments = len(base.get('segments', [])) > 0
        has_personas = len(personas) > 0
        has_problems = len(base.get('problems', [])) > 0
        has_patterns = len(findings.behavioral_patterns if findings else []) > 0
        has_insights = len(base.get('insights', [])) > 0
        has_recommendations = len(recs.get('quick_wins', [])) > 0
        has_brief_answers = bool(brief_answers.get('answers', []))
        has_goal_achievement = bool(goal_achievement.get('goals', []))

        # HTML —Å–æ –≤—Å–µ–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
        html = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{self.config.report_title}</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        {self._get_professional_css()}
    </style>
</head>
<body>
    {self._generate_cover_page()}
    {self._generate_table_of_contents(analysis_data)}
    {self._generate_brief_section(brief_data) if has_brief else ''}
    {self._generate_overview_section(analysis_data, charts)}
    {self._generate_goal_achievement_section(goal_achievement) if has_goal_achievement else ''}
    {self._generate_brief_answers_section(brief_answers) if has_brief_answers else ''}
    {self._generate_current_state_section(current_metrics, charts) if current_metrics.get('estimated_nps') != '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' else ''}
    {self._generate_key_metrics_section(analysis_data, charts) if defense.get('key_findings', []) else ''}
    {self._generate_user_segments_section(base.get('segments', []), charts) if has_segments else ''}
    {self._generate_personas_section(personas) if has_personas else ''}
    {self._generate_pain_points_section_full(base.get('problems', []), charts) if has_problems else ''}
    {self._generate_behavioral_patterns_section_full(findings.behavioral_patterns if findings else []) if has_patterns else ''}
    {self._generate_emotional_journey_section(summaries)}
    {self._generate_insights_section_full(base.get('insights', [])) if has_insights else ''}
    {self._generate_contradictions_section(summaries)}
    {self._generate_quotes_section(summaries)}
    {self._generate_recommendations_section_full(recs) if has_recommendations else ''}
    {self._generate_priority_matrix_section(recs) if has_recommendations else ''}
    {self._generate_roadmap_section(defense) if defense.get('next_steps', []) else ''}
    {self._generate_detailed_appendix(summaries, analysis_data)}
</body>
</html>'''

        return html

    def _generate_brief_section(self, brief_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ —Å –±—Ä–∏—Ñ–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        if not brief_data:
            return ''

        goals_html = ''
        if brief_data.get('research_goals'):
            goals_html = '<h3>–¶–µ–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h3><ul>'
            for goal in brief_data['research_goals']:
                goals_html += f'<li>{goal}</li>'
            goals_html += '</ul>'

        questions_html = ''
        if brief_data.get('research_questions'):
            questions_html = '<h3>–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã</h3><ul>'
            for question in brief_data['research_questions']:
                questions_html += f'<li>{question}</li>'
            questions_html += '</ul>'

        metrics_html = ''
        if brief_data.get('success_metrics'):
            metrics_html = '<h3>–ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞</h3><ul>'
            for metric in brief_data['success_metrics']:
                metrics_html += f'<li>{metric}</li>'
            metrics_html += '</ul>'

        audience_html = ''
        if brief_data.get('target_audience'):
            audience_html = f'<h3>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</h3><p>{brief_data.get("target_audience", "")}</p>'

        context_html = ''
        if brief_data.get('business_context'):
            context_html = f'<h3>–ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç</h3><p>{brief_data.get("business_context", "")}</p>'

        constraints_html = ''
        if brief_data.get('constraints'):
            constraints_list = ''.join([f'<li>{c}</li>' for c in brief_data.get('constraints', [])])
            constraints_html = f'<h3>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</h3><ul>{constraints_list}</ul>'

        return f'''
        <div class="page" id="brief">
            <div class="container">
                <h2>–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h2>
                {goals_html}
                {questions_html}
                {audience_html}
                {context_html}
                {metrics_html}
                {constraints_html}
            </div>
        </div>
        '''

    def _generate_goal_achievement_section(self, goal_achievement):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
        if not goal_achievement or not goal_achievement.get('goals'):
            return ''

        goals_html = ''
        for goal_data in goal_achievement.get('goals', []):
            achievement_level = goal_data.get('achievement_level', 'not_achieved')
            achievement_percentage = goal_data.get('achievement_percentage', 0)

            # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if achievement_level == 'fully_achieved':
                color = self.colors['success']
                status_text = '–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞'
            elif achievement_level == 'mostly_achieved':
                color = self.colors['primary']
                status_text = '–í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞'
            elif achievement_level == 'partially_achieved':
                color = self.colors['warning']
                status_text = '–ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞'
            else:
                color = self.colors['danger']
                status_text = '–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞'

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_html = ''
            if goal_data.get('results'):
                results_html = '<h4>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h4><ul>'
                for result in goal_data['results']:
                    results_html += f'<li>{result}</li>'
                results_html += '</ul>'

            # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            evidence_html = ''
            if goal_data.get('evidence'):
                evidence_html = '<h4>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</h4><div style="margin-bottom: 20px;">'
                for e in goal_data['evidence']:
                    if isinstance(e, dict):
                        strength = e.get('strength', 'moderate')
                        strength_color = self.colors['success'] if strength == 'strong' else self.colors['warning'] if strength == 'moderate' else self.colors['danger']
                        evidence_html += f'''
                        <div class="card" style="margin: 10px 0; border-left: 3px solid {strength_color};">
                            <p>{e.get('content', '')}</p>
                            <span class="tag">–°–∏–ª–∞: {strength}</span>
                        </div>
                        '''
                evidence_html += '</div>'

            # –¶–∏—Ç–∞—Ç—ã
            quotes_html = ''
            if goal_data.get('quotes'):
                quotes_html = '<h4>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã:</h4>'
                for quote in goal_data['quotes']:
                    quotes_html += f'''
                    <div class="quote-card" style="margin: 10px 0;">
                        <p class="quote-text">{quote}</p>
                    </div>
                    '''

            # –ü—Ä–æ–±–µ–ª—ã
            gaps_html = ''
            if goal_data.get('gaps'):
                gaps_html = '<h4 style="color: ' + self.colors['danger'] + ';">–ß—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—è—Å–Ω–∏—Ç—å:</h4><ul>'
                for gap in goal_data['gaps']:
                    gaps_html += f'<li>{gap}</li>'
                gaps_html += '</ul>'

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations_html = ''
            if goal_data.get('recommendations'):
                recs_list = ''.join([f'<li>{r}</li>' for r in goal_data.get('recommendations', [])])
                recommendations_html = f'<div style="margin-top: 20px; padding: 15px; background: {self.colors["background"]}; border-radius: 8px;"><h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h4><ul>{recs_list}</ul></div>'

            goals_html += f'''
            <div class="card" style="margin-bottom: 30px; border-top: 4px solid {color};">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3>–¶–µ–ª—å: {goal_data.get('goal', '')}</h3>
                    <div>
                        <span class="tag" style="background: {color}; color: white;">{status_text}</span>
                        <span class="metric-value" style="color: {color}; margin-left: 20px;">{achievement_percentage}%</span>
                    </div>
                </div>
                {results_html}
                {evidence_html}
                {quotes_html}
                {gaps_html}
                {recommendations_html}
            </div>
            '''

        # –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        overall = goal_achievement.get('overall_success', {})

        achievements_html = ''
        if overall.get('key_achievements'):
            achievements_list = ''.join([f'<li>{a}</li>' for a in overall.get('key_achievements', [])])
            achievements_html = f'<h4>–ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</h4><ul>{achievements_list}</ul>'

        gaps_html = ''
        if overall.get('main_gaps'):
            gaps_list = ''.join([f'<li>{g}</li>' for g in overall.get('main_gaps', [])])
            gaps_html = f'<h4 style="color: {self.colors["warning"]};">–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã:</h4><ul>{gaps_list}</ul>'

        return f'''
        <div class="page" id="goal-achievement">
            <div class="container">
                <h2>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h2>
                <div class="card" style="background: linear-gradient(135deg, {self.colors['background']} 0%, rgba(37, 99, 235, 0.05) 100%); margin-bottom: 30px;">
                    <h3>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
                    <p style="font-size: 1.2em;"><strong>{overall.get('success_rate', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}</strong></p>
                    {achievements_html}
                    {gaps_html}
                </div>
                {goals_html}
                {self._generate_metrics_progress(goal_achievement.get('metrics_progress', []))}
            </div>
        </div>
        '''

    def _generate_metrics_progress(self, metrics_progress):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º"""
        if not metrics_progress:
            return ''

        metrics_html = '<h3>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º —É—Å–ø–µ—Ö–∞</h3>'

        for metric in metrics_progress:
            confidence = metric.get('confidence', 'medium')
            conf_color = self.colors['success'] if confidence == 'high' else self.colors['warning'] if confidence == 'medium' else self.colors['danger']

            actions_html = ''
            if metric.get('required_actions'):
                actions_list = ''.join([f'<li>{a}</li>' for a in metric.get('required_actions', [])])
                actions_html = f'<h5>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h5><ol>{actions_list}</ol>'

            metrics_html += f'''
            <div class="card" style="margin-bottom: 20px;">
                <h4>{metric.get('metric', '')}</h4>
                <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                    <div>
                        <span class="metric-label">–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</span>
                        <span class="metric-value" style="display: block; color: {self.colors['danger']};">{metric.get('baseline', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}</span>
                    </div>
                    <div>
                        <span class="metric-label">–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</span>
                        <span class="metric-value" style="display: block; color: {self.colors['primary']};">{metric.get('target', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}</span>
                    </div>
                    <div>
                        <span class="metric-label">–ü—Ä–æ–≥–Ω–æ–∑ —É–ª—É—á—à–µ–Ω–∏—è</span>
                        <span class="metric-value" style="display: block; color: {self.colors['success']};">{metric.get('projected_improvement', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}</span>
                    </div>
                </div>
                <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ:</strong> <span class="tag" style="background: {conf_color}; color: white;">{confidence}</span></p>
                {actions_html}
            </div>
            '''

        return metrics_html

    def _generate_brief_answers_section(self, brief_answers):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±—Ä–∏—Ñ–∞"""
        if not brief_answers or not brief_answers.get('answers'):
            return ''

        answers_html = ''
        for i, answer_data in enumerate(brief_answers.get('answers', []), 1):
            confidence = answer_data.get('confidence', 'medium')
            conf_color = self.colors['success'] if confidence == 'high' else self.colors['warning'] if confidence == 'medium' else self.colors['danger']

            # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            evidence_html = ''
            if answer_data.get('supporting_evidence'):
                evidence_html = '<h4>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</h4><div style="display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 20px;">'
                for e in answer_data['supporting_evidence']:
                    if isinstance(e, dict):
                        evidence_html += f'''
                        <div class="tag" style="padding: 10px 15px;">
                            <strong>{e.get('type', '')}:</strong> {e.get('content', '')}
                            <br><small>–ò—Å—Ç–æ—á–Ω–∏–∫: {e.get('source', '')}</small>
                        </div>
                        '''
                evidence_html += '</div>'

            # –¶–∏—Ç–∞—Ç—ã
            quotes_html = ''
            if answer_data.get('key_quotes'):
                quotes_html = '<h4>–ö–ª—é—á–µ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã:</h4>'
                for quote_data in answer_data['key_quotes']:
                    if isinstance(quote_data, dict):
                        quotes_html += f'''
                        <div class="quote-card" style="margin: 15px 0;">
                            <p class="quote-text">{quote_data.get('quote', '')}</p>
                            <p style="margin-top: 10px; font-size: 0.9em; color: {self.colors['text_secondary']};">
                                <em>{quote_data.get('relevance', '')}</em>
                            </p>
                            <span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {quote_data.get('interview_id', '')}</span>
                        </div>
                        '''

            # –ü—Ä–æ–±–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö
            gaps_html = ''
            if answer_data.get('data_gaps'):
                gaps_html = f'<div style="margin-top: 20px; padding: 15px; background: rgba(245, 158, 11, 0.1); border-radius: 8px;"><h5 style="color: {self.colors["warning"]};">–ü—Ä–æ–±–µ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö:</h5><ul>'
                for gap in answer_data['data_gaps']:
                    gaps_html += f'<li>{gap}</li>'
                gaps_html += '</ul></div>'

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations_html = ''
            if answer_data.get('recommendations'):
                recs_list = ''.join([f'<li>{r}</li>' for r in answer_data.get('recommendations', [])])
                recommendations_html = f'<div style="margin-top: 20px; padding: 15px; background: rgba(16, 185, 129, 0.05); border-radius: 8px;"><h5>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h5><ul>{recs_list}</ul></div>'

            answers_html += f'''
            <div class="card" style="margin-bottom: 40px; border-left: 4px solid {conf_color};">
                <h3>–í–æ–ø—Ä–æ—Å #{i}: {answer_data.get('question', '')}</h3>

                <div style="background: {self.colors['background']}; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <h4>–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:</h4>
                    <p style="font-size: 1.2em; font-weight: 600;">{answer_data.get('answer_summary', '')}</p>
                </div>

                <h4>–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:</h4>
                <p style="font-size: 1.1em; line-height: 1.8; margin-bottom: 20px;">
                    {answer_data.get('answer', '')}
                </p>

                <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ:</strong> <span class="tag" style="background: {conf_color}; color: white;">{confidence}</span></p>

                {evidence_html}
                {quotes_html}
                {recommendations_html}
                {gaps_html}
            </div>
            '''

        # –ö—Ä–æ—Å—Å-–≤–æ–ø—Ä–æ—Å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
        cross_insights_html = ''
        if brief_answers.get('cross_question_insights'):
            cross_insights_html = '<h3>–ò–Ω—Å–∞–π—Ç—ã, —Å–≤—è–∑—ã–≤–∞—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤</h3>'
            for insight in brief_answers['cross_question_insights']:
                cross_insights_html += f'''
                <div class="card" style="background: linear-gradient(135deg, {self.colors['background']} 0%, rgba(124, 58, 237, 0.05) 100%);">
                    <p style="font-size: 1.1em;"><strong>{insight.get('insight', '')}</strong></p>
                    <p>–°–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {', '.join(insight.get('related_questions', []))}</p>
                    <p>–ò–º–ø–ª–∏–∫–∞—Ü–∏—è: {insight.get('implication', '')}</p>
                </div>
                '''

        return f'''
        <div class="page" id="brief-answers">
            <div class="container">
                <h2>–û—Ç–≤–µ—Ç—ã –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±—Ä–∏—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö {brief_answers.get('total_interviews', '')} –∏–Ω—Ç–µ—Ä–≤—å—é
                </p>

                {answers_html}
                {cross_insights_html}

                {self._generate_unexpected_findings(brief_answers.get('unexpected_findings', []))}
            </div>
        </div>
        '''

    def _generate_unexpected_findings(self, unexpected_findings):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–æ–∫"""
        if not unexpected_findings:
            return ''

        html = '<h3>–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏</h3>'
        for finding in unexpected_findings:
            html += f'''
            <div class="card" style="background: linear-gradient(135deg, {self.colors['background']} 0%, rgba(239, 68, 68, 0.05) 100%);">
                <h4>{finding.get('finding', '')}</h4>
                <p><strong>–í–∞–∂–Ω–æ—Å—Ç—å:</strong> {finding.get('importance', '')}</p>
                <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> {finding.get('recommendation', '')}</p>
            </div>
            '''
        return html

    def _get_professional_css(self):
        """CSS —Å—Ç–∏–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        return f'''
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            line-height: 1.6;
            color: {self.colors['text']};
            background: {self.colors['white']};
            font-size: 16px;
            -webkit-font-smoothing: antialiased;
        }}

        .page {{
            page-break-after: always;
            min-height: 100vh;
            padding: 60px 0;
            background: {self.colors['white']};
        }}

        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 40px;
        }}

        h1, h2, h3, h4, h5, h6 {{
            font-weight: 700;
            line-height: 1.2;
            margin-bottom: 1em;
            color: {self.colors['dark']};
        }}

        h1 {{
            font-size: 3.5em;
            font-weight: 900;
            letter-spacing: -0.02em;
        }}

        h2 {{
            font-size: 2.5em;
            font-weight: 800;
            margin-top: 2em;
            margin-bottom: 1em;
            color: {self.colors['primary']};
            position: relative;
            padding-bottom: 0.5em;
        }}

        h2:after {{
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 4px;
            background: {self.colors['primary']};
            border-radius: 2px;
        }}

        h3 {{
            font-size: 1.8em;
            font-weight: 700;
            margin-top: 1.5em;
            color: {self.colors['dark']};
        }}

        .card {{
            background: {self.colors['white']};
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
            border: 1px solid {self.colors['border']};
            transition: all 0.3s ease;
        }}

        .quote-card {{
            background: {self.colors['background']};
            border-left: 4px solid {self.colors['primary']};
            padding: 20px 30px;
            margin: 20px 0;
            font-style: italic;
            position: relative;
        }}

        .quote-card:before {{
            content: '"';
            font-size: 4em;
            color: {self.colors['primary']};
            opacity: 0.2;
            position: absolute;
            top: -10px;
            left: 10px;
        }}

        .quote-text {{
            font-size: 1.1em;
            line-height: 1.8;
            color: {self.colors['text']};
            font-style: italic;
        }}

        .quote-author {{
            display: block;
            margin-top: 15px;
            font-size: 0.9em;
            color: {self.colors['text_secondary']};
            font-style: normal;
            font-weight: 600;
        }}

        .tag {{
            display: inline-block;
            padding: 6px 16px;
            background: {self.colors['background']};
            color: {self.colors['text']};
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 500;
            margin-right: 10px;
            margin-bottom: 10px;
        }}

        .metric-card {{
            background: linear-gradient(135deg, {self.colors['primary']} 0%, {self.colors['secondary']} 100%);
            color: {self.colors['white']};
            padding: 40px;
            border-radius: 16px;
            text-align: center;
            margin-bottom: 30px;
        }}

        .metric-value {{
            font-size: 3em;
            font-weight: 800;
            margin: 20px 0;
        }}

        .metric-label {{
            font-size: 1.1em;
            opacity: 0.9;
            font-weight: 500;
        }}

        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }}

        .stat-card {{
            background: {self.colors['background']};
            padding: 30px;
            border-radius: 12px;
            text-align: center;
        }}

        .stat-number {{
            font-size: 2.5em;
            font-weight: 800;
            color: {self.colors['primary']};
            margin: 10px 0;
        }}

        .priority-high {{
            background: rgba(239, 68, 68, 0.1);
            color: {self.colors['danger']};
            font-weight: 600;
        }}

        .priority-medium {{
            background: rgba(245, 158, 11, 0.1);
            color: {self.colors['warning']};
        }}

        .priority-low {{
            background: rgba(16, 185, 129, 0.1);
            color: {self.colors['success']};
        }}

        .persona-card {{
            background: {self.colors['white']};
            border-radius: 16px;
            padding: 40px;
            margin-bottom: 40px;
            border: 2px solid {self.colors['border']};
            position: relative;
            overflow: hidden;
        }}

        .persona-card:before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 6px;
            background: linear-gradient(90deg, {self.colors['primary']} 0%, {self.colors['secondary']} 100%);
        }}

        .persona-header {{
            display: flex;
            align-items: center;
            margin-bottom: 30px;
        }}

        .persona-avatar {{
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(135deg, {self.colors['primary']} 0%, {self.colors['secondary']} 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: {self.colors['white']};
            font-size: 2.5em;
            font-weight: 700;
            margin-right: 30px;
        }}

        .pattern-card {{
            background: linear-gradient(135deg, {self.colors['background']} 0%, rgba(37, 99, 235, 0.05) 100%);
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            border-left: 4px solid {self.colors['primary']};
        }}

        .timeline {{
            position: relative;
            padding-left: 40px;
        }}

        .timeline:before {{
            content: '';
            position: absolute;
            left: 15px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: {self.colors['border']};
        }}

        .timeline-item {{
            position: relative;
            margin-bottom: 30px;
        }}

        .timeline-item:before {{
            content: '';
            position: absolute;
            left: -27px;
            top: 5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: {self.colors['primary']};
            border: 3px solid {self.colors['white']};
            box-shadow: 0 0 0 4px {self.colors['background']};
        }}

        .roadmap-phase {{
            background: {self.colors['white']};
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 20px;
            border: 2px solid {self.colors['border']};
            position: relative;
        }}

        .phase-number {{
            position: absolute;
            top: -15px;
            left: 30px;
            background: {self.colors['primary']};
            color: {self.colors['white']};
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 1.2em;
        }}

        .chart-container {{
            margin: 30px 0;
            padding: 20px;
            background: {self.colors['white']};
            border-radius: 12px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }}

        .pain-point-card {{
            background: {self.colors['white']};
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            border-left: 4px solid {self.colors['danger']};
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }}

        .insight-card {{
            background: linear-gradient(135deg, rgba(124, 58, 237, 0.05) 0%, rgba(37, 99, 235, 0.05) 100%);
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            border: 1px solid rgba(124, 58, 237, 0.2);
        }}

        .recommendation-card {{
            background: {self.colors['white']};
            border-radius: 16px;
            padding: 40px;
            margin-bottom: 30px;
            border: 2px solid {self.colors['success']};
            position: relative;
        }}

        .recommendation-card:before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: {self.colors['success']};
        }}

        .cover-page {{
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            background: linear-gradient(135deg, {self.colors['primary']} 0%, {self.colors['secondary']} 100%);
            color: {self.colors['white']};
            position: relative;
            overflow: hidden;
        }}

        .toc {{
            background: {self.colors['background']};
            border-radius: 16px;
            padding: 40px;
            margin: 40px 0;
        }}

        .toc-item {{
            display: flex;
            justify-content: space-between;
            padding: 15px 0;
            border-bottom: 1px solid {self.colors['border']};
            color: {self.colors['text']};
            text-decoration: none;
            transition: all 0.3s ease;
        }}

        @media print {{
            .page {{ page-break-after: always; }}
            body {{ font-size: 14px; }}
            .card {{ box-shadow: none; }}
        }}
        '''

    def _generate_cover_page(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        current_date = datetime.now().strftime("%d.%m.%Y")
        return f'''
        <div class="cover-page">
            <div style="position: relative; z-index: 1;">
                <h1 style="font-size: 4em; margin-bottom: 0.5em;">{self.config.report_title}</h1>
                <p style="font-size: 1.5em; opacity: 0.9; margin-bottom: 2em;">–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞</p>
                <div style="margin-top: 4em;">
                    <p style="font-size: 1.2em; opacity: 0.8;">{self.config.name}</p>
                    <p style="opacity: 0.7;">{current_date}</p>
                </div>
            </div>
        </div>
        '''

    def _generate_table_of_contents(self, analysis_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è"""
        has_brief = analysis_data.get('brief_data') is not None
        has_segments = len(analysis_data.get('base_analysis', {}).get('segments', [])) > 0
        has_personas = len(analysis_data.get('personas', [])) > 0
        has_brief_answers = bool(analysis_data.get('brief_answers', {}).get('answers', []))
        has_goal_achievement = bool(analysis_data.get('goal_achievement', {}).get('goals', []))

        toc_items = []

        if has_brief:
            toc_items.append(('–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', 'brief'))

        toc_items.append(('–û–±—â–∏–π –æ–±–∑–æ—Ä', 'overview'))

        if has_goal_achievement:
            toc_items.append(('–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π', 'goal-achievement'))

        if has_brief_answers:
            toc_items.append(('–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', 'brief-answers'))

        toc_items.extend([
            ('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', 'current-state'),
            ('–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏', 'key-metrics')
        ])

        if has_segments:
            toc_items.append(('–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'segments'))

        if has_personas:
            toc_items.append(('–ü–µ—Ä—Å–æ–Ω—ã', 'personas'))

        toc_items.extend([
            ('–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', 'pain-points'),
            ('–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', 'patterns'),
            ('–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç', 'emotions'),
            ('–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã', 'insights'),
            ('–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è', 'contradictions'),
            ('–í–∞–∂–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã', 'quotes'),
            ('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'recommendations'),
            ('–ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤', 'priority-matrix'),
            ('–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞', 'roadmap'),
            ('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'appendix')
        ])

        toc_html = ''
        for i, (title, anchor) in enumerate(toc_items, 1):
            toc_html += f'''
            <a href="#{anchor}" class="toc-item">
                <span>{i}. {title}</span>
                <span style="opacity: 0.5;">‚Üí</span>
            </a>
            '''

        return f'''
        <div class="page">
            <div class="container">
                <h2>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</h2>
                <div class="toc">
                    {toc_html}
                </div>
            </div>
        </div>
        '''

    def _generate_overview_section(self, analysis_data, charts):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–∑–æ—Ä–Ω–æ–π —Å–µ–∫—Ü–∏–∏"""
        defense = analysis_data.get('defense_materials', {})
        total_interviews = analysis_data.get('total_interviews', 0)
        findings = analysis_data.get('findings', None)

        exec_summary = defense.get('executive_summary', '')
        if not exec_summary and findings:
            exec_summary = findings.executive_summary

        return f'''
        <div class="page" id="overview">
            <div class="container">
                <h2>–û–±—â–∏–π –æ–±–∑–æ—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h2>

                <div class="card" style="background: linear-gradient(135deg, {self.colors['background']} 0%, rgba(37, 99, 235, 0.05) 100%);">
                    <h3>Executive Summary</h3>
                    <p style="font-size: 1.2em; line-height: 1.8;">
                        {exec_summary}
                    </p>
                </div>

                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number">{total_interviews}</div>
                        <div class="metric-label">–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–≤–µ–¥–µ–Ω–æ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{len(analysis_data.get('base_analysis', {}).get('problems', []))}</div>
                        <div class="metric-label">–ö–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{len(analysis_data.get('base_analysis', {}).get('segments', []))}</div>
                        <div class="metric-label">–°–µ–≥–º–µ–Ω—Ç–æ–≤ –≤—ã—è–≤–ª–µ–Ω–æ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">{len(analysis_data.get('recommendations', {}).get('quick_wins', []))}</div>
                        <div class="metric-label">Quick wins</div>
                    </div>
                </div>

                {charts.get('overview_chart', '')}
            </div>
        </div>
        '''

    def _generate_current_state_section(self, metrics, charts):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        nps_color = self.colors['danger']
        if isinstance(metrics.get('estimated_nps'), int):
            if metrics['estimated_nps'] > 0:
                nps_color = self.colors['warning']
            if metrics['estimated_nps'] > 30:
                nps_color = self.colors['success']

        churn_color = self.colors['danger']
        if metrics.get('churn_risk') == '–°—Ä–µ–¥–Ω–∏–π':
            churn_color = self.colors['warning']
        elif metrics.get('churn_risk') == '–ù–∏–∑–∫–∏–π':
            churn_color = self.colors['success']

        return f'''
        <div class="page" id="current-state">
            <div class="container">
                <h2>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</h2>

                <div class="metric-card">
                    <h3 style="color: white; margin-bottom: 30px;">–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞</h3>
                    <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 40px;">
                        <div>
                            <div class="metric-label">–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π NPS</div>
                            <div class="metric-value" style="color: {nps_color};">
                                {metrics.get('estimated_nps', '–ù/–î')}
                            </div>
                        </div>
                        <div>
                            <div class="metric-label">–†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞</div>
                            <div class="metric-value" style="color: {churn_color};">
                                {metrics.get('churn_risk', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
                            </div>
                        </div>
                    </div>
                </div>

                <div class="stats-grid">
                    <div class="card">
                        <h4>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º</h4>
                        <div style="font-size: 2em; font-weight: 700; color: {self.colors['danger']};">
                            {metrics.get('avg_pains_per_user', 0)}
                        </div>
                        <p style="color: {self.colors['text_secondary']};">–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
                    </div>
                    <div class="card">
                        <h4>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π</h4>
                        <div style="font-size: 2em; font-weight: 700; color: {self.colors['primary']};">
                            {metrics.get('avg_needs_per_user', 0)}
                        </div>
                        <p style="color: {self.colors['text_secondary']};">–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
                    </div>
                    <div class="card">
                        <h4>–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏</h4>
                        <div style="font-size: 2em; font-weight: 700; color: {self.colors['warning']};">
                            {metrics.get('negative_emotion_ratio', 0):.0f}%
                        </div>
                        <p style="color: {self.colors['text_secondary']};">–æ—Ç –≤—Å–µ—Ö —ç–º–æ—Ü–∏–π</p>
                    </div>
                </div>

                {charts.get('metrics_chart', '')}

                <div class="card" style="background: rgba(239, 68, 68, 0.05); border-left: 4px solid {self.colors['danger']};">
                    <h4>–ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?</h4>
                    <p>–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ {metrics.get('sample_size', 0)} –∏–Ω—Ç–µ—Ä–≤—å—é –∏ {metrics.get('total_emotions_analyzed', 0)} —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤,
                    —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–±–ª–µ–º –∏ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.
                    –≠—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Ä–∏—Å–∫–∏ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.</p>
                </div>
            </div>
        </div>
        '''

    def _generate_key_metrics_section(self, analysis_data, charts):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        defense = analysis_data.get('defense_materials', {})
        key_findings = defense.get('key_findings', [])

        findings_html = ''
        for i, finding in enumerate(key_findings[:5], 1):
            findings_html += f'''
            <div class="card" style="border-left: 4px solid {self.colors['primary']};">
                <h4>–ù–∞—Ö–æ–¥–∫–∞ #{i}</h4>
                <p style="font-size: 1.1em; line-height: 1.8;">{finding}</p>
            </div>
            '''

        return f'''
        <div class="page" id="key-metrics">
            <div class="container">
                <h2>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h2>

                {findings_html}

                {charts.get('findings_chart', '')}
            </div>
        </div>
        '''

    def _generate_user_segments_section(self, segments, charts):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        segments_html = ''

        colors = [self.colors['primary'], self.colors['secondary'], self.colors['success'],
                 self.colors['warning'], self.colors['danger']]

        for i, segment in enumerate(segments[:5]):
            color = colors[i % len(colors)]

            # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è
            demographics = segment.get('demographics', {})
            demo_html = '<div style="margin: 20px 0;"><h5>–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è:</h5><ul>'
            if demographics.get('age_range'):
                demo_html += f'<li>–í–æ–∑—Ä–∞—Å—Ç: {demographics["age_range"]}</li>'
            if demographics.get('occupation_types'):
                demo_html += f'<li>–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: {", ".join(demographics["occupation_types"][:3])}</li>'
            if demographics.get('location'):
                demo_html += f'<li>–õ–æ–∫–∞—Ü–∏—è: {demographics["location"]}</li>'
            demo_html += '</ul></div>'

            # –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç—ã
            behavioral = segment.get('behavioral_traits', {})
            behavioral_html = ''
            if behavioral:
                behavioral_html = '<div style="margin: 20px 0;"><h5>–ü–æ–≤–µ–¥–µ–Ω–∏–µ:</h5><ul>'
                if behavioral.get('usage_patterns'):
                    for pattern in behavioral['usage_patterns'][:3]:
                        behavioral_html += f'<li>{pattern}</li>'
                behavioral_html += '</ul></div>'

            # –ë–æ–ª–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
            pains_html = ''
            if segment.get('pain_points'):
                pains_html = '<div style="margin: 20px 0;"><h5>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</h5><ul>'
                for pain in segment['pain_points'][:3]:
                    pains_html += f'<li>{pain}</li>'
                pains_html += '</ul></div>'

            # –¶–∏—Ç–∞—Ç—ã
            quotes_html = ''
            if segment.get('representative_quotes'):
                quotes_html = '<div style="margin-top: 30px;"><h5>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è:</h5>'
                for quote in segment['representative_quotes'][:2]:
                    quotes_html += f'''
                    <div class="quote-card" style="margin: 15px 0;">
                        <p class="quote-text">{quote}</p>
                    </div>
                    '''
                quotes_html += '</div>'

            segments_html += f'''
            <div class="card" style="border-top: 4px solid {color};">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h3>{segment.get('name', f'–°–µ–≥–º–µ–Ω—Ç {i+1}')}</h3>
                    <span class="tag" style="background: {color}; color: white; font-size: 1em; padding: 10px 20px;">
                        {segment.get('size', '–†–∞–∑–º–µ—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
                    </span>
                </div>

                <p style="font-size: 1.1em; line-height: 1.8; margin-bottom: 20px;">
                    {segment.get('description', '')}
                </p>

                {demo_html}
                {behavioral_html}
                {pains_html}

                <div style="margin-top: 20px;">
                    <span class="tag">–ò–Ω—Ç–µ—Ä–≤—å—é: {', '.join(map(str, segment.get('interview_ids', [])[:5]))}</span>
                </div>

                {quotes_html}
            </div>
            '''

        return f'''
        <div class="page" id="segments">
            <div class="container">
                <h2>–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—è–≤–ª–µ–Ω–æ {len(segments)} –∫–ª—é—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                </p>

                {segments_html}

                {charts.get('segments_chart', '')}
            </div>
        </div>
        '''

    def _generate_personas_section(self, personas):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω"""
        personas_html = ''

        for i, persona in enumerate(personas[:4]):
            # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è
            demo = persona.get('demographics', {})
            demo_html = f'''
            <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin: 20px 0;">
                <div><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> {demo.get('age', '–ù/–î')}</div>
                <div><strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> {demo.get('occupation', '–ù/–î')}</div>
                <div><strong>–õ–æ–∫–∞—Ü–∏—è:</strong> {demo.get('location', '–ù/–î')}</div>
            </div>
            '''

            # –¶–µ–ª–∏ –∏ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏
            goals_html = '<div style="margin: 20px 0;"><h5>–¶–µ–ª–∏:</h5><ul>'
            for goal in persona.get('goals', [])[:3]:
                goals_html += f'<li>{goal}</li>'
            goals_html += '</ul></div>'

            frustrations_html = '<div style="margin: 20px 0;"><h5>–§—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏:</h5><ul>'
            for frustration in persona.get('frustrations', [])[:3]:
                frustrations_html += f'<li>{frustration}</li>'
            frustrations_html += '</ul></div>'

            # –¶–∏—Ç–∞—Ç—ã
            quotes_html = ''
            if persona.get('real_quotes'):
                quotes_html = '<div style="margin-top: 30px;"><h5>–†–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã:</h5>'
                for quote in persona['real_quotes'][:3]:
                    quotes_html += f'''
                    <div class="quote-card" style="margin: 15px 0;">
                        <p class="quote-text">{quote}</p>
                    </div>
                    '''
                quotes_html += '</div>'

            # –¢–∏–ø–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            scenario_html = ''
            if persona.get('typical_scenario'):
                scenario_html = f'''
                <div class="card" style="background: {self.colors['background']}; margin-top: 20px;">
                    <h5>–¢–∏–ø–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:</h5>
                    <p>{persona['typical_scenario']}</p>
                </div>
                '''

            based_on_interviews = list(map(str, persona.get('based_on_interviews', [])))[:3]

            personas_html += f'''
            <div class="persona-card">
                <div class="persona-header">
                    <div class="persona-avatar">{persona.get('name', '–ü–µ—Ä—Å–æ–Ω–∞')[0]}</div>
                    <div>
                        <h3>{persona.get('name', f'–ü–µ—Ä—Å–æ–Ω–∞ {i+1}')}</h3>
                        <p style="font-size: 1.2em; color: {self.colors['text_secondary']}; font-style: italic;">
                            "{persona.get('tagline', '')}"
                        </p>
                        <span class="tag">–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {', '.join(based_on_interviews)}</span>
                    </div>
                </div>

                <p style="font-size: 1.1em; line-height: 1.8; margin-bottom: 30px;">
                    {persona.get('description', '')}
                </p>

                {demo_html}

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
                    {goals_html}
                    {frustrations_html}
                </div>

                {scenario_html}
                {quotes_html}
            </div>
            '''

        return f'''
        <div class="page" id="personas">
            <div class="container">
                <h2>–ü–µ—Ä—Å–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
                </p>

                {personas_html}
            </div>
        </div>
        '''

    def _generate_pain_points_section_full(self, problems, charts):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫"""
        if not problems:
            return ''

        problems_html = ''

        severity_colors = {
            'critical': self.colors['danger'],
            'high': self.colors['warning'],
            'medium': self.colors['primary'],
            'low': self.colors['success']
        }

        for i, problem in enumerate(problems[:10], 1):
            severity = problem.get('severity', 'medium')
            color = severity_colors.get(severity, self.colors['primary'])

            # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            evidence_html = ''
            if problem.get('evidence'):
                evidence_html = '<div style="margin: 20px 0;"><h5>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</h5><ul>'
                for evidence in problem['evidence'][:3]:
                    evidence_html += f'<li>{evidence}</li>'
                evidence_html += '</ul></div>'

            # –¶–∏—Ç–∞—Ç—ã
            quotes_html = ''
            if problem.get('quotes'):
                quotes_html = '<div style="margin-top: 20px;"><h5>–¶–∏—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</h5>'
                for quote_data in problem['quotes'][:2]:
                    if isinstance(quote_data, dict):
                        quotes_html += f'''
                        <div class="quote-card" style="margin: 15px 0;">
                            <p class="quote-text">{quote_data.get('text', '')}</p>
                            <span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {quote_data.get('interview_id', '')}</span>
                        </div>
                        '''
                    else:
                        quotes_html += f'''
                        <div class="quote-card" style="margin: 15px 0;">
                            <p class="quote-text">{quote_data}</p>
                        </div>
                        '''
                quotes_html += '</div>'

            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            opportunity_html = ''
            opportunity = problem.get('opportunity', {})
            if opportunity and isinstance(opportunity, dict):
                opportunity_html = f'''
                <div class="card" style="background: rgba(16, 185, 129, 0.05); margin-top: 20px;">
                    <h5>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:</h5>
                    <p>{opportunity.get('description', '')}</p>
                    {f'<p><strong>–¶–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</strong> {opportunity.get("value_prop", "")}</p>' if opportunity.get('value_prop') else ''}
                </div>
                '''

            problems_html += f'''
            <div class="pain-point-card">
                <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 20px;">
                    <h3>#{i}. {problem.get('title', problem.get('problem_title', '–ü—Ä–æ–±–ª–µ–º–∞'))}</h3>
                    <div>
                        <span class="tag priority-{severity}" style="font-size: 0.9em;">
                            {severity.upper()}
                        </span>
                        <span class="tag" style="margin-left: 10px;">
                            {problem.get('affected_percentage', '–ù/–î')}
                        </span>
                    </div>
                </div>

                <p style="font-size: 1.1em; line-height: 1.8; margin-bottom: 20px;">
                    {problem.get('description', problem.get('problem_description', ''))}
                </p>

                {evidence_html}
                {quotes_html}
                {opportunity_html}

                <div style="margin-top: 20px; display: flex; gap: 15px;">
                    <span class="tag">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {problem.get('priority', 'P2')}</span>
                    <span class="tag">–£—Å–∏–ª–∏—è: {problem.get('effort', 'M')}</span>
                </div>
            </div>
            '''

        return f'''
        <div class="page" id="pain-points">
            <div class="container">
                <h2>–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                </p>

                {problems_html}

                {charts.get('problems_chart', '')}
            </div>
        </div>
        '''

    def _generate_behavioral_patterns_section_full(self, patterns):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        if not patterns:
            return ''

        patterns_html = ''

        for i, pattern in enumerate(patterns[:8], 1):
            # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            evidence_html = ''
            if pattern.get('evidence'):
                evidence_html = '<div style="margin: 20px 0;"><h5>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</h5>'
                for e in pattern['evidence'][:3]:
                    if isinstance(e, dict):
                        evidence_html += f'''
                        <div class="card" style="margin: 10px 0; background: {self.colors['background']};">
                            <p>{e.get('content', '')}</p>
                            <span class="tag">–ò–Ω—Ç–µ—Ä–≤—å—é: {', '.join(map(str, e.get('interview_ids', [])))}</span>
                        </div>
                        '''
                evidence_html += '</div>'

            # –¢—Ä–∏–≥–≥–µ—Ä—ã
            triggers_html = ''
            if pattern.get('triggers'):
                triggers_html = '<div style="margin: 20px 0;"><h5>–¢—Ä–∏–≥–≥–µ—Ä—ã:</h5><ul>'
                for trigger in pattern['triggers'][:3]:
                    if isinstance(trigger, dict):
                        triggers_html += f'<li><strong>{trigger.get("trigger", "")}:</strong> {trigger.get("type", "")} (–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å: {trigger.get("reliability", "")})</li>'
                    else:
                        triggers_html += f'<li>{trigger}</li>'
                triggers_html += '</ul></div>'

            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            emotional_html = ''
            if pattern.get('emotional_journey'):
                emotional_html = '<div style="margin: 20px 0;"><h5>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å:</h5>'
                emotional_html += '<div class="timeline">'
                for stage in pattern['emotional_journey'][:4]:
                    if isinstance(stage, dict):
                        emotional_html += f'''
                        <div class="timeline-item">
                            <h6>{stage.get('stage', '')}</h6>
                            <p>{stage.get('emotion', '')} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {stage.get('intensity', 0)}/10)</p>
                        </div>
                        '''
                emotional_html += '</div></div>'

            # –ò–º–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞
            design_html = ''
            design_impl = pattern.get('design_implications', {})
            if design_impl and isinstance(design_impl, dict):
                design_html = f'''
                <div class="card" style="background: rgba(37, 99, 235, 0.05); margin-top: 20px;">
                    <h5>–ò–º–ø–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞:</h5>
                    {f'<p><strong>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω:</strong> {design_impl.get("support_pattern", "")}</p>' if design_impl.get('support_pattern') else ''}
                    {f'<p><strong>–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω:</strong> {design_impl.get("break_pattern", "")}</p>' if design_impl.get('break_pattern') else ''}
                    {f'<p><strong>–¢–æ—á–∫–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</strong> {", ".join(design_impl.get("intervention_points", []))}</p>' if design_impl.get('intervention_points') else ''}
                </div>
                '''

            # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
            quotes_html = ''
            if pattern.get('representative_quotes'):
                quotes_html = '<div style="margin-top: 20px;"><h5>–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã:</h5>'
                for q in pattern['representative_quotes'][:2]:
                    quotes_html += f'''
                    <div class="quote-card" style="margin: 15px 0;">
                        <p class="quote-text">{q}</p>
                    </div>
                    '''
                quotes_html += '</div>'

            patterns_html += f'''
            <div class="pattern-card">
                <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 20px;">
                    <h3>{pattern.get('pattern', f'–ü–∞—Ç—Ç–µ—Ä–Ω {i}')}</h3>
                    <div>
                        <span class="tag">{pattern.get('frequency', '')}</span>
                        <span class="tag" style="margin-left: 10px;">
                            –°–∏–ª–∞: {pattern.get('strength', 'moderate')}
                        </span>
                    </div>
                </div>

                <p style="font-size: 1.1em; line-height: 1.8; margin-bottom: 20px;">
                    {pattern.get('description', '')}
                </p>

                {evidence_html}
                {triggers_html}
                {emotional_html}
                {design_html}
                {quotes_html}
            </div>
            '''

        return f'''
        <div class="page" id="patterns">
            <div class="container">
                <h2>–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –£—Å—Ç–æ–π—á–∏–≤—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
                </p>

                {patterns_html}
            </div>
        </div>
        '''

    def _generate_emotional_journey_section(self, summaries):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
        all_emotions = []
        for summary in summaries:
            for emotion in summary.emotional_journey[:5]:
                if isinstance(emotion, dict):
                    all_emotions.append({
                        'interview_id': summary.interview_id,
                        'moment': emotion.get('moment', ''),
                        'emotion': emotion.get('emotion', ''),
                        'trigger': emotion.get('trigger', ''),
                        'intensity': emotion.get('intensity', 0),
                        'quote': emotion.get('quote', '')
                    })

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —ç–º–æ—Ü–∏–π
        positive_emotions = [e for e in all_emotions if any(pos in e['emotion'].lower() for pos in ['—Ä–∞–¥–æ—Å—Ç—å', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ', '–≤–æ—Å—Ç–æ—Ä–≥', '—Å—á–∞—Å—Ç—å–µ', '–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ'])]
        negative_emotions = [e for e in all_emotions if any(neg in e['emotion'].lower() for neg in ['—Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è', '–∑–ª–æ—Å—Ç—å', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', '—Å—Ç—Ä–∞—Ö'])]

        # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–æ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        peak_emotions = sorted(all_emotions, key=lambda x: x['intensity'], reverse=True)[:5]

        emotions_html = ''

        # –ü–∏–∫–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏
        if peak_emotions:
            emotions_html += '<h3>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∏–∫–∏</h3>'
            for emotion in peak_emotions:
                intensity_color = self.colors['danger'] if emotion['intensity'] >= 8 else self.colors['warning'] if emotion['intensity'] >= 5 else self.colors['primary']

                emotions_html += f'''
                <div class="card" style="border-left: 4px solid {intensity_color};">
                    <div style="display: flex; justify-content: space-between; align-items: start;">
                        <div style="flex: 1;">
                            <h4>{emotion['moment']}</h4>
                            <p><strong>–¢—Ä–∏–≥–≥–µ—Ä:</strong> {emotion['trigger']}</p>
                            <p><strong>–≠–º–æ—Ü–∏—è:</strong> {emotion['emotion']}</p>
                        </div>
                        <div style="text-align: center; margin-left: 30px;">
                            <div style="font-size: 2em; font-weight: 700; color: {intensity_color};">
                                {emotion['intensity']}/10
                            </div>
                            <span class="metric-label">–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å</span>
                        </div>
                    </div>
                    {f'<div class="quote-card" style="margin-top: 20px;"><p class="quote-text">{emotion["quote"]}</p><span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {emotion["interview_id"]}</span></div>' if emotion['quote'] else ''}
                </div>
                '''

        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
        if positive_emotions:
            emotions_html += f'''
            <h3 style="margin-top: 40px;">–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã</h3>
            <div class="card" style="background: rgba(16, 185, 129, 0.05);">
                <p>–í—ã—è–≤–ª–µ–Ω–æ <strong>{len(positive_emotions)}</strong> –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤</p>
                <ul>
            '''
            for emotion in positive_emotions[:3]:
                emotions_html += f'<li><strong>{emotion["moment"]}:</strong> {emotion["emotion"]} (—Ç—Ä–∏–≥–≥–µ—Ä: {emotion["trigger"]})</li>'
            emotions_html += '</ul></div>'

        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
        if negative_emotions:
            emotions_html += f'''
            <h3 style="margin-top: 40px;">–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã</h3>
            <div class="card" style="background: rgba(239, 68, 68, 0.05);">
                <p>–í—ã—è–≤–ª–µ–Ω–æ <strong>{len(negative_emotions)}</strong> –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤</p>
                <ul>
            '''
            for emotion in negative_emotions[:3]:
                emotions_html += f'<li><strong>{emotion["moment"]}:</strong> {emotion["emotion"]} (—Ç—Ä–∏–≥–≥–µ—Ä: {emotion["trigger"]})</li>'
            emotions_html += '</ul></div>'

        return f'''
        <div class="page" id="emotions">
            <div class="container">
                <h2>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –∏ –∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
                </p>

                {emotions_html}
            </div>
        </div>
        '''

    def _generate_insights_section_full(self, insights):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤"""
        if not insights:
            return ''

        insights_html = ''

        for i, insight in enumerate(insights[:8], 1):
            # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
            evidence_html = ''
            if insight.get('evidence'):
                evidence_html = '<div style="margin: 20px 0;"><h5>–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞:</h5><ul>'
                for evidence in insight['evidence'][:4]:
                    evidence_html += f'<li>{evidence}</li>'
                evidence_html += '</ul></div>'

            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            opportunity_html = ''
            opportunity = insight.get('opportunity')
            if opportunity:
                if isinstance(opportunity, str):
                    opportunity_html = f'<p><strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:</strong> {opportunity}</p>'
                elif isinstance(opportunity, dict):
                    opportunity_html = f'<p><strong>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:</strong> {opportunity.get("description", "")}</p>'

            # –¶–∏—Ç–∞—Ç—ã
            quotes_html = ''
            if insight.get('quotes'):
                quotes_html = '<div style="margin-top: 20px;">'
                for quote_data in insight['quotes'][:2]:
                    if isinstance(quote_data, dict):
                        quotes_html += f'''
                        <div class="quote-card">
                            <p class="quote-text">{quote_data.get('text', '')}</p>
                            <span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {quote_data.get('interview_id', '')}</span>
                        </div>
                        '''
                    else:
                        quotes_html += f'''
                        <div class="quote-card">
                            <p class="quote-text">{quote_data}</p>
                        </div>
                        '''
                quotes_html += '</div>'

            insights_html += f'''
            <div class="insight-card">
                <h3>–ò–Ω—Å–∞–π—Ç #{i}: {insight.get('title', '')}</h3>

                <p style="font-size: 1.2em; line-height: 1.8; margin: 20px 0; font-weight: 500;">
                    {insight.get('description', '')}
                </p>

                {evidence_html}
                {opportunity_html}
                {quotes_html}

                <div style="margin-top: 20px; display: flex; gap: 15px;">
                    <span class="tag priority-{insight.get('severity', 'medium')}">
                        {insight.get('severity', 'medium').upper()}
                    </span>
                    <span class="tag">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {insight.get('priority', 'P2')}</span>
                </div>
            </div>
            '''

        return f'''
        <div class="page" id="insights">
            <div class="container">
                <h2>–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –ì–ª—É–±–æ–∫–∏–µ –≤—ã–≤–æ–¥—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∫—Ä–æ—Å—Å-–∞–Ω–∞–ª–∏–∑–µ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
                </p>

                {insights_html}
            </div>
        </div>
        '''

    def _generate_contradictions_section(self, summaries):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
        all_contradictions = []
        for summary in summaries:
            for contradiction in summary.contradictions[:3]:
                if isinstance(contradiction, str):
                    all_contradictions.append({
                        'interview_id': summary.interview_id,
                        'contradiction': contradiction,
                        'type': 'simple'
                    })

        contradictions_html = ''

        if not all_contradictions:
            contradictions_html = '''
            <div class="card">
                <p>–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ,
                —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.</p>
            </div>
            '''
        else:
            for i, contra in enumerate(all_contradictions[:6], 1):
                contradictions_html += f'''
                <div class="card" style="border-left: 4px solid {self.colors['warning']};">
                    <h4>–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ #{i}</h4>
                    <p>{contra['contradiction']}</p>
                    <span class="tag">–ò–Ω—Ç–µ—Ä–≤—å—é {contra['interview_id']}</span>
                </div>
                '''

        return f'''
        <div class="page" id="contradictions">
            <div class="container">
                <h2>–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
                </p>

                {contradictions_html}
            </div>
        </div>
        '''

    def _generate_quotes_section(self, summaries):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –≤–∞–∂–Ω—ã—Ö —Ü–∏—Ç–∞—Ç"""
        # –°–æ–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –º–æ—â–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        power_quotes = []
        for summary in summaries:
            for quote in summary.quotes[:5]:
                if isinstance(quote, dict):
                    quote_data = {
                        'interview_id': summary.interview_id,
                        'text': quote.get('text', ''),
                        'significance': quote.get('significance', ''),
                        'quote_type': quote.get('quote_type', 'general'),
                        'context': quote.get('context', '')
                    }
                    if len(quote_data['text']) > 50:  # –¢–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
                        power_quotes.append(quote_data)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        pain_quotes = [q for q in power_quotes if q['quote_type'] == 'pain']
        need_quotes = [q for q in power_quotes if q['quote_type'] == 'need']
        insight_quotes = [q for q in power_quotes if q['quote_type'] == 'insight']
        emotion_quotes = [q for q in power_quotes if q['quote_type'] == 'emotion']

        quotes_html = ''

        # –¶–∏—Ç–∞—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if pain_quotes:
            quotes_html += '<h3>–¶–∏—Ç–∞—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö</h3>'
            for quote in pain_quotes[:3]:
                quotes_html += f'''
                <div class="quote-card" style="border-left-color: {self.colors['danger']};">
                    <p class="quote-text">{quote['text']}</p>
                    {f'<p style="margin: 10px 0; font-size: 0.9em; color: {self.colors["text_secondary"]};">{quote["context"]}</p>' if quote['context'] else ''}
                    <span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {quote['interview_id']}</span>
                </div>
                '''

        # –¶–∏—Ç–∞—Ç—ã –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
        if need_quotes:
            quotes_html += '<h3 style="margin-top: 40px;">–¶–∏—Ç–∞—Ç—ã –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö</h3>'
            for quote in need_quotes[:3]:
                quotes_html += f'''
                <div class="quote-card" style="border-left-color: {self.colors['primary']};">
                    <p class="quote-text">{quote['text']}</p>
                    <span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {quote['interview_id']}</span>
                </div>
                '''

        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        if emotion_quotes:
            quotes_html += '<h3 style="margin-top: 40px;">–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è</h3>'
            for quote in emotion_quotes[:3]:
                quotes_html += f'''
                <div class="quote-card" style="border-left-color: {self.colors['secondary']};">
                    <p class="quote-text">{quote['text']}</p>
                    <span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {quote['interview_id']}</span>
                </div>
                '''

        # –ï—Å–ª–∏ —Ü–∏—Ç–∞—Ç –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ
        if len(power_quotes) < 5:
            quotes_html += '<h3 style="margin-top: 40px;">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞–∂–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è</h3>'
            for quote in power_quotes[:5]:
                quotes_html += f'''
                <div class="quote-card">
                    <p class="quote-text">{quote['text']}</p>
                    {f'<p style="margin: 10px 0; font-size: 0.9em; color: {self.colors["text_secondary"]}; font-style: normal;"><strong>–ó–Ω–∞—á–∏–º–æ—Å—Ç—å:</strong> {quote["significance"]}</p>' if quote['significance'] else ''}
                    <span class="quote-author">–ò–Ω—Ç–µ—Ä–≤—å—é {quote['interview_id']}</span>
                </div>
                '''

        return f'''
        <div class="page" id="quotes">
            <div class="container">
                <h2>–í–∞–∂–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –ù–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–µ —Å—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
                </p>

                {quotes_html}
            </div>
        </div>
        '''

    def _generate_recommendations_section_full(self, recommendations):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å–µ–∫—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recs_html = ''

        # Quick wins
        if recommendations.get('quick_wins'):
            recs_html += '<h3>Quick Wins (–±—ã—Å—Ç—Ä—ã–µ –ø–æ–±–µ–¥—ã)</h3>'
            for i, rec in enumerate(recommendations['quick_wins'][:5], 1):
                steps_html = ''.join([f'<li>{step}</li>' for step in rec.get('implementation_steps', [])])
                problems_html = ''.join([f'<li>{problem}</li>' for problem in rec.get('affected_problems', [])[:3]])
                metrics_tags = ''.join([f'<span class="tag">–ú–µ—Ç—Ä–∏–∫–∞: {metric}</span>' for metric in rec.get('success_metrics', [])[:2]])

                # –¶–∏—Ç–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                quote_html = ''
                if rec.get('user_quotes_supporting'):
                    quote_html = f'<div class="quote-card" style="margin-top: 20px;"><p class="quote-text">{rec.get("user_quotes_supporting", [""])[0]}</p></div>'

                recs_html += f'''
                <div class="recommendation-card">
                    <h4>#{i}. {rec.get('title', '')}</h4>

                    <p style="font-size: 1.1em; line-height: 1.8; margin: 20px 0;">
                        {rec.get('description', '')}
                    </p>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin: 30px 0;">
                        <div>
                            <h5>–®–∞–≥–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</h5>
                            <ol>{steps_html}</ol>
                        </div>
                        <div>
                            <h5>–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç:</h5>
                            <p>{rec.get('expected_impact', '')}</p>

                            <h5 style="margin-top: 20px;">–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã:</h5>
                            <ul>{problems_html}</ul>
                        </div>
                    </div>

                    <div style="display: flex; gap: 15px; flex-wrap: wrap;">
                        <span class="tag" style="background: {self.colors['primary']}; color: white;">
                            {rec.get('timeline', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}
                        </span>
                        <span class="tag">–†–µ—Å—É—Ä—Å—ã: {rec.get('resources_needed', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}</span>
                        {metrics_tags}
                    </div>

                    {quote_html}
                </div>
                '''

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
        if recommendations.get('strategic_initiatives'):
            recs_html += '<h3 style="margin-top: 50px;">–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã</h3>'
            for i, init in enumerate(recommendations['strategic_initiatives'][:3], 1):
                # –§–∞–∑—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                phases_html = ''
                if init.get('implementation_phases'):
                    phases_list = ''.join([f'<li>{phase}</li>' for phase in init.get('implementation_phases', [])])
                    phases_html = f'<div style="margin: 20px 0;"><h5>–§–∞–∑—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</h5><ul>{phases_list}</ul></div>'

                recs_html += f'''
                <div class="card" style="border-top: 4px solid {self.colors['secondary']};">
                    <h4>{init.get('title', '')}</h4>
                    <p style="font-size: 1.1em; line-height: 1.8;">
                        {init.get('description', '')}
                    </p>

                    <div style="margin: 20px 0;">
                        <h5>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</h5>
                        <p>{init.get('rationale', '')}</p>
                    </div>

                    {phases_html}

                    <div style="display: flex; gap: 15px;">
                        <span class="tag">ROI: {init.get('expected_roi', '–¢—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏')}</span>
                    </div>
                </div>
                '''

        # –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if recommendations.get('innovation_opportunities'):
            recs_html += '<h3 style="margin-top: 50px;">–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>'
            for opp in recommendations['innovation_opportunities'][:2]:
                # –¢—Ä–µ–±—É–µ–º—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                research_html = ''
                if opp.get('required_research'):
                    research_html = f'<p><strong>–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:</strong> {opp.get("required_research", "")}</p>'

                recs_html += f'''
                <div class="card" style="background: linear-gradient(135deg, rgba(124, 58, 237, 0.05) 0%, rgba(37, 99, 235, 0.05) 100%);">
                    <h4>{opp.get('title', '')}</h4>
                    <p>{opp.get('description', '')}</p>
                    <p><strong>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ:</strong> {opp.get('potential_impact', '')}</p>
                    {research_html}
                </div>
                '''

        return f'''
        <div class="page" id="recommendations">
            <div class="container">
                <h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
                </p>

                {recs_html}
            </div>
        </div>
        '''

    def _generate_priority_matrix_section(self, recommendations):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–∞—Ç—Ä–∏—Ü—É
        matrix_html = '''
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 30px;">
            <div class="card" style="background: rgba(16, 185, 129, 0.05); border: 2px solid ''' + self.colors['success'] + ''';">
                <h4 style="color: ''' + self.colors['success'] + ''';">–í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ / –ù–∏–∑–∫–∏–µ —É—Å–∏–ª–∏—è</h4>
                <p style="font-size: 0.9em; color: ''' + self.colors['text_secondary'] + '''; margin-bottom: 20px;">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –ù–∞—á–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                </p>
        '''

        # Quick wins –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if recommendations.get('quick_wins'):
            for rec in recommendations['quick_wins'][:3]:
                matrix_html += f'<div style="margin: 10px 0; padding: 10px; background: white; border-radius: 8px;"><strong>‚Ä¢ {rec.get("title", "")}</strong></div>'

        matrix_html += '''
            </div>
            <div class="card" style="background: rgba(37, 99, 235, 0.05); border: 2px solid ''' + self.colors['primary'] + ''';">
                <h4 style="color: ''' + self.colors['primary'] + ''';">–í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ / –í—ã—Å–æ–∫–∏–µ —É—Å–∏–ª–∏—è</h4>
                <p style="font-size: 0.9em; color: ''' + self.colors['text_secondary'] + '''; margin-bottom: 20px;">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í–´–°–û–ö–ò–ô - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª
                </p>
        '''

        # Strategic initiatives –≤ —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if recommendations.get('strategic_initiatives'):
            for init in recommendations['strategic_initiatives'][:3]:
                matrix_html += f'<div style="margin: 10px 0; padding: 10px; background: white; border-radius: 8px;"><strong>‚Ä¢ {init.get("title", "")}</strong></div>'

        matrix_html += '''
            </div>
            <div class="card" style="background: rgba(245, 158, 11, 0.05); border: 2px solid ''' + self.colors['warning'] + ''';">
                <h4 style="color: ''' + self.colors['warning'] + ''';">–ù–∏–∑–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ / –ù–∏–∑–∫–∏–µ —É—Å–∏–ª–∏—è</h4>
                <p style="font-size: 0.9em; color: ''' + self.colors['text_secondary'] + '''; margin-bottom: 20px;">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –°–†–ï–î–ù–ò–ô - –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–µ
                </p>
                <p style="font-style: italic;">–ú–µ–ª–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è UX</p>
            </div>
            <div class="card" style="background: rgba(239, 68, 68, 0.05); border: 2px solid ''' + self.colors['danger'] + ''';">
                <h4 style="color: ''' + self.colors['danger'] + ''';">–ù–∏–∑–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ / –í—ã—Å–æ–∫–∏–µ —É—Å–∏–ª–∏—è</h4>
                <p style="font-size: 0.9em; color: ''' + self.colors['text_secondary'] + '''; margin-bottom: 20px;">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ù–ò–ó–ö–ò–ô - –ü–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å
                </p>
                <p style="font-style: italic;">–ü–æ–ª–Ω—ã–π —Ä–µ–¥–∏–∑–∞–π–Ω –±–µ–∑ clear ROI</p>
            </div>
        </div>
        '''

        return f'''
        <div class="page" id="priority-matrix">
            <div class="container">
                <h2>–ú–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–ª–∏—è–Ω–∏—é –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                </p>

                {matrix_html}

                <div class="card" style="margin-top: 40px; background: {self.colors['background']};">
                    <h4>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:</h4>
                    <ol style="font-size: 1.1em; line-height: 2;">
                        <li><strong>–ù–µ–¥–µ–ª—è 1-2:</strong> –ó–∞–ø—É—Å—Ç–∏—Ç—å 2-3 quick wins –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</li>
                        <li><strong>–ù–µ–¥–µ–ª—è 3-4:</strong> –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤</li>
                        <li><strong>–ú–µ—Å—è—Ü 2:</strong> –ù–∞—á–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã</li>
                        <li><strong>–ú–µ—Å—è—Ü 3:</strong> –û—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω</li>
                    </ol>
                </div>
            </div>
        </div>
        '''

    def _generate_roadmap_section(self, defense):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        next_steps = defense.get('next_steps', [])

        if not next_steps:
            return ''

        steps_html = ''
        for i, step in enumerate(next_steps[:6], 1):
            if isinstance(step, dict):
                steps_html += f'''
                <div class="roadmap-phase">
                    <div class="phase-number">{i}</div>
                    <h4 style="margin-left: 40px;">{step.get('action', '')}</h4>

                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                        <div>
                            <p><strong>–°—Ä–æ–∫–∏:</strong> {step.get('timeline', '')}</p>
                            <p><strong>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</strong> {step.get('responsible', '')}</p>
                        </div>
                        <div>
                            <p><strong>–†–µ—Å—É—Ä—Å—ã:</strong> {step.get('resources', '')}</p>
                            <p><strong>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> {step.get('expected_result', '')}</p>
                        </div>
                    </div>
                </div>
                '''
            else:
                steps_html += f'''
                <div class="roadmap-phase">
                    <div class="phase-number">{i}</div>
                    <p style="margin-left: 40px;">{step}</p>
                </div>
                '''

        # ROI —Ä–∞—Å—á–µ—Ç—ã
        roi_html = ''
        if defense.get('roi_calculation'):
            roi_html = f'''
            <div class="card" style="background: linear-gradient(135deg, {self.colors['background']} 0%, rgba(16, 185, 129, 0.05) 100%);">
                <h3>–†–∞—Å—á–µ—Ç ROI</h3>
                <p style="font-size: 1.1em; line-height: 1.8;">
                    {defense['roi_calculation']}
                </p>
            </div>
            '''

        # –†–∏—Å–∫–∏
        risks_html = ''
        if defense.get('risk_mitigation'):
            risks_html = '<h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏</h3>'
            for risk in defense['risk_mitigation']:
                if isinstance(risk, dict):
                    risks_html += f'''
                    <div class="card" style="border-left: 4px solid {self.colors['warning']};">
                        <h4>{risk.get('risk', '')}</h4>
                        <p><strong>–ú–∏—Ç–∏–≥–∞—Ü–∏—è:</strong> {risk.get('mitigation', '')}</p>
                        <p><strong>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</strong> {risk.get('monitoring', '')}</p>
                    </div>
                    '''

        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        metrics_html = ''
        if defense.get('success_metrics'):
            metrics_list = ''.join([f'<li>{metric}</li>' for metric in defense['success_metrics']])
        else:
            metrics_list = '<li>NPS Score</li><li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º</li><li>–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á</li>'

        return f'''
        <div class="page" id="roadmap">
            <div class="container">
                <h2>–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è</h2>
                <p style="font-size: 1.1em; color: {self.colors['text_secondary']}; margin-bottom: 30px;">
                    –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                </p>

                {steps_html}
                {roi_html}
                {risks_html}

                <div class="card" style="margin-top: 40px; background: {self.colors['primary']}; color: white;">
                    <h3 style="color: white;">–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</h3>
                    <ul style="font-size: 1.1em;">
                        {metrics_list}
                    </ul>
                </div>
            </div>
        </div>
        '''

    def _generate_detailed_appendix(self, summaries, analysis_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        appendix_html = '<h3>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–≤—å—é</h3>'

        for summary in summaries[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            profile = summary.respondent_profile

            # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã
            themes_html = ''
            if summary.key_themes:
                themes_html = '<h5>–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:</h5><ul>'
                for theme in summary.key_themes[:3]:
                    if isinstance(theme, dict):
                        themes_html += f'<li><strong>{theme.get("theme", "")}:</strong> {theme.get("description", "")[:150]}...</li>'
                themes_html += '</ul>'

            # –û—Å–Ω–æ–≤–Ω—ã–µ –±–æ–ª–∏
            pains_html = ''
            if summary.pain_points:
                pains_html = '<h5>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</h5><ul>'
                for pain in summary.pain_points[:3]:
                    if isinstance(pain, dict):
                        pains_html += f'<li>{pain.get("pain", "")[:150]}...</li>'
                pains_html += '</ul>'

            # –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
            insights_html = ''
            if summary.insights:
                insights_html = '<h5>–ò–Ω—Å–∞–π—Ç—ã:</h5><ul>'
                for insight in summary.insights[:3]:
                    if isinstance(insight, str):
                        insights_html += f'<li>{insight[:150]}...</li>'
                insights_html += '</ul>'

            appendix_html += f'''
            <div class="card" style="margin-bottom: 30px;">
                <h4>–ò–Ω—Ç–µ—Ä–≤—å—é #{summary.interview_id}</h4>

                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 20px 0;">
                    <div>
                        <p><strong>–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è:</strong> {profile.get('demographics', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
                        <p><strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</strong> {profile.get('occupation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
                        <p><strong>–û–ø—ã—Ç:</strong> {profile.get('experience_level', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</p>
                    </div>
                    <div>
                        <p><strong>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</strong> {profile.get('context', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:100]}...</p>
                        <p><strong>Sentiment Score:</strong> {summary.sentiment_score:.2f}</p>
                    </div>
                </div>

                {themes_html}
                {pains_html}
                {insights_html}
            </div>
            '''

        # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
        methodology_html = f'''
        <h3 style="margin-top: 50px;">–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h3>
        <div class="card">
            <h4>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö</h4>
            <ul>
                <li>–ü—Ä–æ–≤–µ–¥–µ–Ω–æ <strong>{analysis_data.get('total_interviews', 0)}</strong> –≥–ª—É–±–∏–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é</li>
                <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–ª—É—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–∞–π–¥</li>
                <li>–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é: 45-60 –º–∏–Ω—É—Ç</li>
            </ul>

            <h4 style="margin-top: 20px;">–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</h4>
            <ul>
                <li>AI-–∞—Å—Å–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</li>
                <li>–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç–æ—á–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (–º–∏–Ω–∏–º—É–º 50 —Å–ª–æ–≤)</li>
                <li>–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä–≤—å—é</li>
                <li>–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏</li>
            </ul>

            <h4 style="margin-top: 20px;">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</h4>
            <ul>
                <li>–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: {analysis_data.get('total_interviews', 0)} —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤</li>
                {f'<li style="color: {self.colors["warning"]};">–í—ã–±–æ—Ä–∫–∞ –º–µ–Ω—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π (8+ –∏–Ω—Ç–µ—Ä–≤—å—é)</li>' if analysis_data.get('total_interviews', 0) < 8 else ''}
                <li>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö</li>
                <li>–í–æ–∑–º–æ–∂–Ω–∞—è —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π</li>
            </ul>
        </div>
        '''

        return f'''
        <div class="page" id="appendix">
            <div class="container">
                <h2>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h2>

                {appendix_html}
                {methodology_html}

                <div class="card" style="margin-top: 40px; background: {self.colors['background']};">
                    <h4>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                    <p><strong>–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ:</strong> {self.config.author}</p>
                    <p><strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> {self.config.name}</p>
                    <p><strong>–î–∞—Ç–∞:</strong> {datetime.now().strftime("%d.%m.%Y")}</p>
                </div>
            </div>
        </div>
        '''

    def _generate_static_charts(self, analysis_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ base64"""
        charts = {}

        try:
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø–æ severity
            problems = analysis_data.get('base_analysis', {}).get('problems', [])
            if problems:
                severity_counts = {}
                for p in problems:
                    sev = p.get('severity', 'medium')
                    severity_counts[sev] = severity_counts.get(sev, 0) + 1

                if severity_counts:
                    plt.figure(figsize=(8, 6))
                    colors_map = {
                        'critical': self.colors['danger'],
                        'high': self.colors['warning'],
                        'medium': self.colors['primary'],
                        'low': self.colors['success']
                    }

                    severities = list(severity_counts.keys())
                    counts = list(severity_counts.values())
                    colors = [colors_map.get(s, self.colors['primary']) for s in severities]

                    plt.bar(severities, counts, color=colors)
                    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏', fontsize=16, pad=20)
                    plt.xlabel('–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å', fontsize=12)
                    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º', fontsize=12)

                    buffer = BytesIO()
                    plt.tight_layout()
                    plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', facecolor='white')
                    buffer.seek(0)
                    image_base64 = base64.b64encode(buffer.getvalue()).decode()
                    plt.close()

                    charts['problems_chart'] = f'''
                    <div class="chart-container">
                        <img src="data:image/png;base64,{image_base64}" style="width: 100%; max-width: 800px; margin: 0 auto; display: block;">
                    </div>
                    '''

            # –ì—Ä–∞—Ñ–∏–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            segments = analysis_data.get('base_analysis', {}).get('segments', [])
            if segments:
                plt.figure(figsize=(10, 6))
                segment_names = [s.get('name', f'–°–µ–≥–º–µ–Ω—Ç {i+1}')[:20] for i, s in enumerate(segments)]
                segment_sizes = []

                for s in segments:
                    size_str = s.get('size', '0%')
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "30-40%" –∏–ª–∏ "3-4 –∏–∑ 8"
                    import re
                    match = re.search(r'(\d+)', size_str)
                    if match:
                        segment_sizes.append(int(match.group(1)))
                    else:
                        segment_sizes.append(20)  # default

                if segment_sizes:
                    colors = plt.cm.Set3(range(len(segments)))
                    plt.pie(segment_sizes, labels=segment_names, autopct='%1.0f%%', colors=colors, startangle=90)
                    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º', fontsize=16, pad=20)

                    buffer = BytesIO()
                    plt.tight_layout()
                    plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', facecolor='white')
                    buffer.seek(0)
                    image_base64 = base64.b64encode(buffer.getvalue()).decode()
                    plt.close()

                    charts['segments_chart'] = f'''
                    <div class="chart-container">
                        <img src="data:image/png;base64,{image_base64}" style="width: 100%; max-width: 600px; margin: 0 auto; display: block;">
                    </div>
                    '''

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")

        return charts

    def generate_docx(self, analysis_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX –æ—Ç—á–µ—Ç–∞"""
        doc = Document()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self._setup_docx_styles(doc)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        doc.add_heading(self.config.report_title, 0)
        doc.add_paragraph(f'{self.config.name}\n{datetime.now().strftime("%d.%m.%Y")}')
        doc.add_page_break()

        # –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ
        doc.add_heading('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', level=1)
        doc.add_paragraph('1. –û–±—â–∏–π –æ–±–∑–æ—Ä')
        doc.add_paragraph('2. –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏')
        doc.add_paragraph('3. –°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        doc.add_paragraph('4. –ü–µ—Ä—Å–æ–Ω—ã')
        doc.add_paragraph('5. –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã')
        doc.add_paragraph('6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
        doc.add_paragraph('7. –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞')
        doc.add_paragraph('8. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
        doc.add_page_break()

        # –û–±—â–∏–π –æ–±–∑–æ—Ä
        self._add_overview_to_docx(doc, analysis_data)

        # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
        self._add_key_findings_to_docx(doc, analysis_data)

        # –°–µ–≥–º–µ–Ω—Ç—ã
        self._add_segments_to_docx(doc, analysis_data)

        # –ü–µ—Ä—Å–æ–Ω—ã
        self._add_personas_to_docx(doc, analysis_data)

        # –ü—Ä–æ–±–ª–µ–º—ã
        self._add_problems_to_docx(doc, analysis_data)

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self._add_recommendations_to_docx(doc, analysis_data)

        return doc

    def _setup_docx_styles(self, doc):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è DOCX"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        styles = doc.styles

        # Heading 1
        heading1 = styles['Heading 1']
        heading1.font.name = 'Arial'
        heading1.font.size = Pt(24)
        heading1.font.color.rgb = RGBColor(37, 99, 235)

        # Heading 2
        heading2 = styles['Heading 2']
        heading2.font.name = 'Arial'
        heading2.font.size = Pt(18)
        heading2.font.color.rgb = RGBColor(37, 99, 235)

    def _add_overview_to_docx(self, doc, analysis_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –≤ DOCX"""
        doc.add_heading('–û–±—â–∏–π –æ–±–∑–æ—Ä', level=1)

        defense = analysis_data.get('defense_materials', {})
        exec_summary = defense.get('executive_summary', '')

        doc.add_paragraph(exec_summary)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        table = doc.add_table(rows=2, cols=4)
        table.style = 'Light Grid Accent 1'

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        cells = table.rows[0].cells
        cells[0].text = '–ò–Ω—Ç–µ—Ä–≤—å—é'
        cells[1].text = '–ü—Ä–æ–±–ª–µ–º'
        cells[2].text = '–°–µ–≥–º–µ–Ω—Ç–æ–≤'
        cells[3].text = 'Quick Wins'

        # –î–∞–Ω–Ω—ã–µ
        cells = table.rows[1].cells
        cells[0].text = str(analysis_data.get('total_interviews', 0))
        cells[1].text = str(len(analysis_data.get('base_analysis', {}).get('problems', [])))
        cells[2].text = str(len(analysis_data.get('base_analysis', {}).get('segments', [])))
        cells[3].text = str(len(analysis_data.get('recommendations', {}).get('quick_wins', [])))

        doc.add_page_break()

    def _add_key_findings_to_docx(self, doc, analysis_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞—Ö–æ–¥–æ–∫ –≤ DOCX"""
        doc.add_heading('–ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏', level=1)

        defense = analysis_data.get('defense_materials', {})
        key_findings = defense.get('key_findings', [])

        for i, finding in enumerate(key_findings[:5], 1):
            doc.add_heading(f'–ù–∞—Ö–æ–¥–∫–∞ #{i}', level=2)
            doc.add_paragraph(finding)

    def _add_segments_to_docx(self, doc, analysis_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ DOCX"""
        doc.add_heading('–°–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', level=1)

        segments = analysis_data.get('base_analysis', {}).get('segments', [])

        for i, segment in enumerate(segments, 1):
            doc.add_heading(f'{segment.get("name", f"–°–µ–≥–º–µ–Ω—Ç {i}")}', level=2)
            doc.add_paragraph(f'–†–∞–∑–º–µ—Ä: {segment.get("size", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")}')
            doc.add_paragraph(segment.get('description', ''))

    def _add_personas_to_docx(self, doc, analysis_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω –≤ DOCX"""
        doc.add_heading('–ü–µ—Ä—Å–æ–Ω—ã', level=1)

        personas = analysis_data.get('personas', [])

        for persona in personas:
            doc.add_heading(persona.get('name', '–ü–µ—Ä—Å–æ–Ω–∞'), level=2)
            doc.add_paragraph(f'–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {", ".join(map(str, persona.get("based_on_interviews", [])))}')
            doc.add_paragraph(persona.get('description', ''))

    def _add_problems_to_docx(self, doc, analysis_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ DOCX"""
        doc.add_heading('–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã', level=1)

        problems = analysis_data.get('base_analysis', {}).get('problems', [])

        for i, problem in enumerate(problems[:10], 1):
            doc.add_heading(f'–ü—Ä–æ–±–ª–µ–º–∞ #{i}: {problem.get("problem_title", "")}', level=2)
            doc.add_paragraph(problem.get('problem_description', ''))
            doc.add_paragraph(f'–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {problem.get("severity", "medium")}')

    def _add_recommendations_to_docx(self, doc, analysis_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ DOCX"""
        doc.add_heading('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', level=1)

        recs = analysis_data.get('recommendations', {})
        quick_wins = recs.get('quick_wins', [])

        for i, rec in enumerate(quick_wins[:5], 1):
            doc.add_heading(f'Quick Win #{i}: {rec.get("title", "")}', level=2)
            doc.add_paragraph(rec.get('description', ''))
            doc.add_paragraph(f'–°—Ä–æ–∫–∏: {rec.get("timeline", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")}')

    def generate_pdf(self, html_content):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏–∑ HTML"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML –≤ PDF
            pdf = WeasyHTML(string=html_content).write_pdf()
            return pdf
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            return None

# ========================================================================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ========================================================================
class UXAnalyzerInterface:
    def __init__(self):
        self.api_key = None
        self.analyzer = None
        self.transcripts = []
        self.brief_content = None
        self.company_config = CompanyConfig()
        self.output_widget = widgets.Output()
        self.progress_output = widgets.Output()

    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –í–∏–¥–∂–µ—Ç—ã
        self.api_key_input = widgets.Password(
            placeholder='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenRouter API –∫–ª—é—á',
            description='API Key:',
            style={'description_width': 'initial'},
            layout=widgets.Layout(width='500px')
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        self.model_dropdown = widgets.Dropdown(
            options=config['api']['openrouter']['models'],
            value=config['api']['openrouter']['default_model'],
            description='–ú–æ–¥–µ–ª—å:',
            style={'description_width': 'initial'},
            layout=widgets.Layout(width='500px')
        )

        self.company_name_input = widgets.Text(
            value='Company',
            placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏',
            description='–ö–æ–º–ø–∞–Ω–∏—è:',
            style={'description_width': 'initial'},
            layout=widgets.Layout(width='500px')
        )

        self.report_title_input = widgets.Text(
            value='UX Research Report',
            placeholder='–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞',
            description='–ù–∞–∑–≤–∞–Ω–∏–µ:',
            style={'description_width': 'initial'},
            layout=widgets.Layout(width='500px')
        )

        self.author_input = widgets.Text(
            value='Research Team',
            placeholder='–ê–≤—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞',
            description='–ê–≤—Ç–æ—Ä:',
            style={'description_width': 'initial'},
            layout=widgets.Layout(width='500px')
        )

        self.upload_btn = widgets.Button(
            description='üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã',
            button_style='primary',
            layout=widgets.Layout(width='200px', height='40px')
        )

        self.upload_brief_btn = widgets.Button(
            description='üìã –ó–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–∏—Ñ',
            button_style='info',
            layout=widgets.Layout(width='200px', height='40px')
        )

        self.analyze_btn = widgets.Button(
            description='üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑',
            button_style='success',
            layout=widgets.Layout(width='200px', height='40px'),
            disabled=True
        )

        self.files_label = widgets.HTML(value='<p>–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã</p>')
        self.brief_label = widgets.HTML(value='<p>–ë—Ä–∏—Ñ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</p>')

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.upload_btn.on_click(self._on_upload_click)
        self.upload_brief_btn.on_click(self._on_upload_brief_click)
        self.analyze_btn.on_click(self._on_analyze_click)

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        config_box = widgets.VBox([
            widgets.HTML('<h2>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>'),
            self.api_key_input,
            self.model_dropdown,  # –î–æ–±–∞–≤–∏–ª–∏ –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
            self.company_name_input,
            self.report_title_input,
            self.author_input
        ])

        upload_box = widgets.VBox([
            widgets.HTML('<h2>üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>'),
            widgets.HBox([self.upload_btn, self.upload_brief_btn]),
            self.files_label,
            self.brief_label
        ])

        analyze_box = widgets.VBox([
            widgets.HTML('<h2>üî¨ –ê–Ω–∞–ª–∏–∑</h2>'),
            self.analyze_btn,
            self.progress_output
        ])

        main_layout = widgets.VBox([
            config_box,
            widgets.HTML('<hr>'),
            upload_box,
            widgets.HTML('<hr>'),
            analyze_box,
            widgets.HTML('<hr>'),
            self.output_widget
        ])

        display(main_layout)

    def _on_upload_click(self, b):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
        with self.output_widget:
            clear_output()
            print("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏...")

        uploaded = files.upload()

        if uploaded:
            self.transcripts = []
            for filename, content in uploaded.items():
                try:
                    if filename.endswith('.txt'):
                        text = content.decode('utf-8')
                    elif filename.endswith('.docx'):
                        doc = Document(BytesIO(content))
                        text = '\n'.join([p.text for p in doc.paragraphs])
                    else:
                        continue

                    self.transcripts.append(text)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {filename}: {e}")

            self.files_label.value = f'<p>‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤: {len(self.transcripts)}</p>'

            if len(self.transcripts) < 8:
                self.files_label.value += f'<p style="color: orange;">‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 8 –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>'

            if self.transcripts and self.api_key_input.value:
                self.analyze_btn.disabled = False

    def _on_upload_brief_click(self, b):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–∏—Ñ–∞"""
        with self.output_widget:
            clear_output()
            print("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –±—Ä–∏—Ñ–æ–º...")

        uploaded = files.upload()

        if uploaded:
            for filename, content in uploaded.items():
                try:
                    if filename.endswith('.txt'):
                        self.brief_content = content.decode('utf-8')
                    elif filename.endswith('.docx'):
                        doc = Document(BytesIO(content))
                        self.brief_content = '\n'.join([p.text for p in doc.paragraphs])

                    self.brief_label.value = f'<p>‚úÖ –ë—Ä–∏—Ñ –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}</p>'
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±—Ä–∏—Ñ–∞: {e}")

    def _on_analyze_click(self, b):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        with self.output_widget:
            clear_output()

        if not self.api_key_input.value:
            with self.output_widget:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á!")
            return

        if not self.transcripts:
            with self.output_widget:
                print("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.company_config.name = self.company_name_input.value
        self.company_config.report_title = self.report_title_input.value
        self.company_config.author = self.author_input.value

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        self.analyze_btn.disabled = True
        self.analyze_btn.description = '‚è≥ –ê–Ω–∞–ª–∏–∑...'

        try:
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
            self.analyzer = AdvancedGeminiAnalyzer(
                self.api_key_input.value,
                self.model_dropdown.value
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∏—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.brief_content:
                self.analyzer.set_brief(self.brief_content)

            with self.progress_output:
                clear_output()
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                results = self.analyzer.analyze_transcripts_parallel(self.transcripts)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
            self._generate_reports(results)

        except Exception as e:
            with self.output_widget:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
                traceback.print_exc()
        finally:
            self.analyze_btn.disabled = False
            self.analyze_btn.description = 'üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑'

    def _generate_reports(self, results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
        with self.output_widget:
            clear_output()
            print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤...")

        generator = EnhancedReportGeneratorFixed(self.company_config)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º timestamp –≤ –Ω–∞—á–∞–ª–µ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        html_content = None

        # HTML
        try:
            html_content = generator.generate_html(results)
            html_filename = f'ux_report_{timestamp}.html'

            with open(html_filename, 'w', encoding='utf-8') as f:
                f.write(html_content)

            with self.output_widget:
                print(f"‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {html_filename}")
                display(FileLink(html_filename))
        except Exception as e:
            with self.output_widget:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HTML: {e}")
                import traceback
                traceback.print_exc()

        # PDF - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å html_content
        if html_content:
            try:
                pdf_content = generator.generate_pdf(html_content)
                if pdf_content:
                    pdf_filename = f'ux_report_{timestamp}.pdf'
                    with open(pdf_filename, 'wb') as f:
                        f.write(pdf_content)

                    with self.output_widget:
                        print(f"‚úÖ PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {pdf_filename}")
                        display(FileLink(pdf_filename))
            except Exception as e:
                with self.output_widget:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF: {e}")

        # DOCX
        try:
            doc = generator.generate_docx(results)
            docx_filename = f'ux_report_{timestamp}.docx'
            doc.save(docx_filename)

            with self.output_widget:
                print(f"‚úÖ DOCX –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {docx_filename}")
                display(FileLink(docx_filename))
        except Exception as e:
            with self.output_widget:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DOCX: {e}")

        with self.output_widget:
            print("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é: {results.get('total_interviews', 0)}")
            print(f"üîç –í—ã—è–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º: {len(results.get('base_analysis', {}).get('problems', []))}")
            print(f"üë• –°–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(results.get('base_analysis', {}).get('segments', []))}")
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(results.get('recommendations', {}).get('quick_wins', []))}")

# ========================================================================
# –ó–ê–ü–£–°–ö –ò–ù–¢–ï–†–§–ï–ô–°–ê
# ========================================================================
if __name__ == "__main__":
    interface = UXAnalyzerInterface()
    interface.create_interface()

files.download("ux_report_20250903_122200.html")