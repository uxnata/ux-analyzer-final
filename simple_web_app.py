#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è UX –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
–ó–∞–ø—É—Å–∫: python3 simple_web_app.py
"""

from flask import Flask, render_template, request, jsonify, send_file
import os
import json
import traceback
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

app = Flask(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ –Ω–æ—É—Ç–±—É–∫–∞
try:
    # –ß–∏—Ç–∞–µ–º –Ω–æ—É—Ç–±—É–∫
    with open('ux_analyzer_core_ebicya.ipynb', 'r', encoding='utf-8') as f:
        notebook = json.load(f)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ —è—á–µ–µ–∫
    code_cells = []
    for cell in notebook['cells']:
        if cell['cell_type'] == 'code':
            code_cells.extend(cell['source'])
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–¥
    full_code = ''.join(code_cells)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
    exec(full_code, globals())
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
    traceback.print_exc()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
analyzer_instance = None
analysis_results = None

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/api/analyze', methods=['POST'])
def analyze():
    """API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤"""
    global analyzer_instance, analysis_results
    
    try:
        data = request.get_json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        api_key = data.get('api_key')
        company_name = data.get('company_name', 'Company')
        report_title = data.get('report_title', 'UX Research Report')
        author = data.get('author', 'Research Team')
        transcripts = data.get('transcripts', [])
        brief_content = data.get('brief_content', '')
        
        if not api_key:
            return jsonify({'error': 'API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}), 400
        
        if not transcripts:
            return jsonify({'error': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer_instance = AdvancedGeminiAnalyzer(api_key)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—Ä–∏—Ñ –µ—Å–ª–∏ –µ—Å—Ç—å
        if brief_content:
            analyzer_instance.set_brief(brief_content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        analyzer_instance.company_config.name = company_name
        analyzer_instance.company_config.report_title = report_title
        analyzer_instance.company_config.author = author
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_results = analyzer_instance.analyze_transcripts_parallel(transcripts)
        
        return jsonify({
            'success': True,
            'message': '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'results': analysis_results
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'traceback': traceback.format_exc()
        }), 500

@app.route('/api/status')
def status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    return jsonify({
        'status': 'ready',
        'analyzer_loaded': analyzer_instance is not None
    })

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    os.makedirs('templates', exist_ok=True)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    
    app.run(debug=True, host='0.0.0.0', port=5000)
